var searchIndex = {};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",1,null],[11,"read_u32","","",1,null],[11,"read_u64","","",1,null],[11,"read_uint","","",1,null],[11,"write_u16","","",1,null],[11,"write_u32","","",1,null],[11,"write_u64","","",1,null],[11,"write_uint","","",1,null],[11,"read_u16_into","","",1,null],[11,"read_u32_into","","",1,null],[11,"read_u64_into","","",1,null],[11,"write_u16_into","","",1,null],[11,"write_u32_into","","",1,null],[11,"write_u64_into","","",1,null],[11,"from_slice_u16","","",1,null],[11,"from_slice_u32","","",1,null],[11,"from_slice_u64","","",1,null],[11,"from_slice_f32","","",1,null],[11,"from_slice_f64","","",1,null],[11,"read_u16","","",2,null],[11,"read_u32","","",2,null],[11,"read_u64","","",2,null],[11,"read_uint","","",2,null],[11,"write_u16","","",2,null],[11,"write_u32","","",2,null],[11,"write_u64","","",2,null],[11,"write_uint","","",2,null],[11,"read_u16_into","","",2,null],[11,"read_u32_into","","",2,null],[11,"read_u64_into","","",2,null],[11,"write_u16_into","","",2,null],[11,"write_u32_into","","",2,null],[11,"write_u64_into","","",2,null],[11,"from_slice_u16","","",2,null],[11,"from_slice_u32","","",2,null],[11,"from_slice_u64","","",2,null],[11,"from_slice_f32","","",2,null],[11,"from_slice_f64","","",2,null]],"paths":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["fallible_iterator"] = {"doc":"\"Fallible\" iterators.","items":[[3,"AndThen","fallible_iterator","An iterator which applies a fallible transform to the elements of the underlying iterator.",null,null],[3,"Chain","","An iterator which yields the elements of one iterator followed by another.",null,null],[3,"Cloned","","An iterator which clones the elements of the underlying iterator.",null,null],[3,"Convert","","A fallible iterator that wraps a normal iterator over `Result`s.",null,null],[3,"Enumerate","","An iterator that yields the iteration count as well as the values of the underlying iterator.",null,null],[3,"Filter","","An iterator which uses a predicate to determine which values of the underlying iterator should be yielded.",null,null],[3,"FilterMap","","An iterator which both filters and maps the values of the underlying iterator.",null,null],[3,"Fuse","","An iterator that yields `Ok(None)` forever after the underlying iterator yields `Ok(None)` once.",null,null],[3,"Iterator","","A normal (non-fallible) iterator which wraps a fallible iterator.",null,null],[3,"Map","","An iterator which applies a transform to the elements of the underlying iterator.",null,null],[3,"MapErr","","An iterator which applies a transform to the errors of the underlying iterator.",null,null],[3,"Peekable","","An iterator which can look at the next element without consuming it.",null,null],[3,"Rev","","An iterator which yields elements of the underlying iterator in reverse order.",null,null],[3,"Take","","An iterator which yields a limited number of elements from the underlying iterator.",null,null],[3,"Zip","","An iterator that yields pairs of this iterator's and another iterator's values.",null,null],[5,"convert","","Converts an `Iterator<Item = Result<T, E>>` into a `FallibleIterator<Item = T, Error = E>`.",null,{"inputs":[{"name":"i"}],"output":{"name":"convert"}}],[8,"FallibleIterator","","An `Iterator`-like trait that allows for calculation of items to fail.",null,null],[16,"Item","","The type being iterated over.",0,null],[16,"Error","","The error type.",0,null],[10,"next","","Advances the iterator and returns the next value.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Returns bounds on the remaining length of the iterator.",0,null],[11,"all","","Determines if all elements of this iterator match a predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"and_then","","Returns an iterator which applies a fallible transform to the elements of the underlying iterator.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"any","","Determines if any element of this iterator matches a predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"by_ref","","Borrow an iterator rather than consuming it.",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"chain","","Returns an iterator which yields the elements of this iterator followed by another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"chain"}}],[11,"cloned","","Returns an iterator which clones all of its elements.",0,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"count","","Consumes the iterator, returning the number of remaining items.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"collect","","Transforms the iterator into a collection.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"enumerate","","Returns an iterator which yields the current iteration count as well as the value.",0,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"filter","","Returns an iterator which uses a predicate to determine which values should be yielded.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Returns an iterator which both filters and maps.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"find","","Returns the first element of the iterator that matches a predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fuse","","Returns an iterator which yields this iterator's elements and ends after the first `Ok(None)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"fold","","Applies a function over the elements of the iterator, producing a single final value.",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"iterator","","Returns a normal (non-fallible) iterator over `Result<Item, Error>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"iterator"}}],[11,"last","","Returns the last element of the iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Returns an iterator which applies a transform to the elements of the underlying iterator.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Returns an iterator which applies a transform to the errors of the underlying iterator.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"max","","Returns the maximal element of the iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"max_by_key","","Returns the element of the iterator which gives the maximum value from the function.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"min","","Returns the minimal element of the iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"min_by_key","","Returns the element of the iterator which gives the minimum value from the function.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"nth","","Returns the `n`th element of the iterator.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"peekable","","Returns an iterator that can peek at the next element without consuming it.",0,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"position","","Returns the position of the first element of this iterator that matches a predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"rev","","Returns an iterator that yields this iterator's items in the opposite order.",0,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"take","","Returns an iterator that yields only the first `n` values of this iterator.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"zip","","Returns an iterator that yields pairs of this iterator's and another iterator's values.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"zip"}}],[11,"cmp","","Lexicographically compares the elements of this iterator to that of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"partial_cmp","","Lexicographically compares the elements of this iterator to that of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"eq","","Determines if the elements of this iterator are equal to those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"ne","","Determines if the elements of this iterator are not equal to those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"lt","","Determines if the elements of this iterator are lexicographically less than those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"le","","Determines if the elements of this iterator are lexicographically less than or equal to those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"gt","","Determines if the elements of this iterator are lexicographically greater than those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"ge","","Determines if the elements of this iterator are lexicographically greater than or equal to those of another.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[8,"DoubleEndedFallibleIterator","","A fallible iterator able to yield elements from both ends.",null,null],[10,"next_back","","Advances the end of the iterator, returning the last value.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"FromFallibleIterator","","Conversion from a fallible iterator.",null,null],[10,"from_fallible_iterator","","Creates a value from a fallible iterator.",2,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[8,"IntoFallibleIterator","","Conversion into a `FallibleIterator`.",null,null],[16,"Item","","The elements of the iterator.",3,null],[16,"Error","","The error value of the iterator.",3,null],[16,"IntoIter","","The iterator.",3,null],[10,"into_fallible_iterator","","Creates a fallible iterator from a value.",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",5,null],[11,"count","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",6,null],[11,"count","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",8,null],[11,"count","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",11,null],[11,"count","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",13,null],[11,"count","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",14,null],[11,"count","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","Returns a reference to the next value without advancing the iterator.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",16,null],[11,"count","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","",18,null]],"paths":[[8,"FallibleIterator"],[8,"DoubleEndedFallibleIterator"],[8,"FromFallibleIterator"],[8,"IntoFallibleIterator"],[3,"AndThen"],[3,"Chain"],[3,"Cloned"],[3,"Convert"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Fuse"],[3,"Iterator"],[3,"Map"],[3,"MapErr"],[3,"Peekable"],[3,"Rev"],[3,"Take"],[3,"Zip"]]};
searchIndex["gimli"] = {"doc":"A lazy, zero-copy parser for the DWARF debugging information format.","items":[[3,"DebugFrameOffset","gimli","An offset into the `.debug_frame` section.",null,null],[12,"0","","",0,null],[3,"EhFrameOffset","","An offset into the `.eh_frame` section.",null,null],[12,"0","","",1,null],[3,"DebugFrame","","`DebugFrame` contains the `.debug_frame` section's frame unwinding information required to unwind to and recover registers from older frames on the stack. For example, this is useful for a debugger that wants to print locals in a backtrace.",null,null],[3,"EhFrameHdr","","`EhFrameHdr` contains the information about the `.eh_frame_hdr` section.",null,null],[3,"ParsedEhFrameHdr","","`ParsedEhFrameHdr` contains the parsed information fron the `.eh_frame` section.",null,null],[3,"EhHdrTable","","The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.",null,null],[3,"EhFrame","","`EhFrame` contains the frame unwinding information needed during exception handling found in the `.eh_frame` section.",null,null],[3,"BaseAddresses","","Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.",null,null],[12,"cfi","","The address of the current CFI unwind section (`.eh_frame` or `.debug_frame`) in memory.",2,null],[12,"text","","The address of the `.text` section in memory.",2,null],[12,"data","","The address of the `.data` section in memory.",2,null],[3,"CfiEntriesIter","","An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame` section.",null,null],[3,"Augmentation","","We support the z-style augmentation [defined by `.eh_frame`][ehframe].",null,null],[3,"CommonInformationEntry","","A Common Information Entry holds information that is shared among many > Frame Description Entries. There is at least one CIE in every non-empty > `.debug_frame` section.",null,null],[3,"PartialFrameDescriptionEntry","","A partially parsed `FrameDescriptionEntry`.",null,null],[3,"FrameDescriptionEntry","","A `FrameDescriptionEntry` is a set of CFA instructions for an address range.",null,null],[3,"UninitializedUnwindContext","","Common context needed when evaluating the call frame unwinding information.",null,null],[3,"InitializedUnwindContext","","An initialized unwinding context.",null,null],[3,"UnwindTable","","The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s `CallFrameInstruction` program, yielding the each row one at a time.",null,null],[3,"RegisterRuleIter","","An unordered iterator for register rules.",null,null],[3,"UnwindTableRow","","A row in the virtual unwind table that describes how to find the values of the registers in the previous frame for a range of PC addresses.",null,null],[3,"CallFrameInstructionIter","","A lazy iterator parsing call frame instructions.",null,null],[3,"DwUt","","",null,null],[12,"0","","",3,null],[3,"DwCfa","","",null,null],[12,"0","","",4,null],[3,"DwChildren","","",null,null],[12,"0","","",5,null],[3,"DwTag","","",null,null],[12,"0","","",6,null],[3,"DwAt","","",null,null],[12,"0","","",7,null],[3,"DwForm","","",null,null],[12,"0","","",8,null],[3,"DwAte","","",null,null],[12,"0","","",9,null],[3,"DwLle","","",null,null],[12,"0","","",10,null],[3,"DwDs","","",null,null],[12,"0","","",11,null],[3,"DwEnd","","",null,null],[12,"0","","",12,null],[3,"DwAccess","","",null,null],[12,"0","","",13,null],[3,"DwVis","","",null,null],[12,"0","","",14,null],[3,"DwVirtuality","","",null,null],[12,"0","","",15,null],[3,"DwLang","","",null,null],[12,"0","","",16,null],[3,"DwAddr","","",null,null],[12,"0","","",17,null],[3,"DwId","","",null,null],[12,"0","","",18,null],[3,"DwCc","","",null,null],[12,"0","","",19,null],[3,"DwInl","","",null,null],[12,"0","","",20,null],[3,"DwOrd","","",null,null],[12,"0","","",21,null],[3,"DwDsc","","",null,null],[12,"0","","",22,null],[3,"DwIdx","","",null,null],[12,"0","","",23,null],[3,"DwDefaulted","","",null,null],[12,"0","","",24,null],[3,"DwLns","","",null,null],[12,"0","","",25,null],[3,"DwLne","","",null,null],[12,"0","","",26,null],[3,"DwLnct","","",null,null],[12,"0","","",27,null],[3,"DwMacro","","",null,null],[12,"0","","",28,null],[3,"DwRle","","",null,null],[12,"0","","",29,null],[3,"DwOp","","",null,null],[12,"0","","",30,null],[3,"DwEhPe","","",null,null],[12,"0","","",31,null],[3,"BigEndian","","Big endian byte order.",null,null],[3,"EndianBuf","","A `&[u8]` slice with endianity metadata.",null,null],[3,"LittleEndian","","Little endian byte order.",null,null],[3,"DebugMacinfoOffset","","An offset into the `.debug_macinfo` section.",null,null],[12,"0","","",32,null],[3,"Abbreviation","","An abbreviation describes the shape of a `DebuggingInformationEntry`'s type: its code, tag type, whether it has children, and its set of attributes.",null,null],[3,"Abbreviations","","A set of type abbreviations.",null,null],[3,"AttributeSpecification","","The description of an attribute in an abbreviated type. It is a pair of name and form.",null,null],[3,"DebugAbbrev","","The `DebugAbbrev` struct represents the abbreviations describing `DebuggingInformationEntry`s' attribute names and forms found in the `.debug_abbrev` section.",null,null],[3,"DebugAbbrevOffset","","An offset into the `.debug_abbrev` section.",null,null],[12,"0","","",33,null],[3,"ArangeEntry","","A single parsed arange.",null,null],[3,"ArangeEntryIter","","An iterator over the aranges from a `.debug_aranges` section.",null,null],[3,"DebugAranges","","The `DebugAranges` struct represents the DWARF address range information found in the `.debug_aranges` section.",null,null],[3,"DebugLineOffset","","An offset into the `.debug_line` section.",null,null],[12,"0","","",34,null],[3,"DebugLine","","The `DebugLine` struct contains the source location to instruction mapping found in the `.debug_line` section.",null,null],[3,"StateMachine","","Executes a `LineNumberProgram` to recreate the matrix mapping to and from instructions to source locations.",null,null],[3,"OpcodesIter","","An iterator yielding parsed opcodes.",null,null],[3,"LineNumberRow","","A row in the line number program's resulting matrix.",null,null],[3,"LineNumberSequence","","A sequence within a line number program.  A sequence, as defined in section 6.2.5 of the standard, is a linear subset of a line number program within which addresses are monotonically increasing.",null,null],[12,"start","","The first address that is covered by this sequence within the line number program.",35,null],[12,"end","","The first address that is not covered by this sequence within the line number program.",35,null],[3,"LineNumberProgramHeader","","A header for a line number program in the `.debug_line` section, as defined in section 6.2.4 of the standard.",null,null],[3,"IncompleteLineNumberProgram","","A line number program that has not been run to completion.",null,null],[3,"CompleteLineNumberProgram","","A line number program that has previously been run to completion.",null,null],[3,"FileEntry","","An entry in the `LineNumberProgramHeader`'s `file_names` set.",null,null],[3,"DebugLoc","","The `DebugLoc` struct represents the DWARF strings found in the `.debug_loc` section.",null,null],[3,"DebugLocOffset","","An offset into the `.debug_loc` section.",null,null],[12,"0","","",36,null],[3,"LocationListEntry","","A location list entry from the `.debug_loc` section.",null,null],[12,"range","","The address range that this location is valid for.",37,null],[12,"data","","The data containing a single location description.",37,null],[3,"LocationListIter","","An iterator over a location list.",null,null],[3,"RawLocationListIter","","A raw iterator over a location list.",null,null],[3,"Piece","","The description of a single piece of the result of a DWARF expression.",null,null],[12,"size_in_bits","","If given, the size of the piece in bits.  If `None`, then the piece takes its size from the enclosed location.",38,null],[12,"bit_offset","","If given, the bit offset of the piece.  If `None`, then the piece starts at the next byte boundary.",38,null],[12,"location","","Where this piece is to be found.",38,null],[3,"Expression","","The bytecode for a DWARF expression or location description.",null,null],[12,"0","","",39,null],[3,"Evaluation","","A DWARF expression evaluator.",null,null],[3,"DebugPubNames","","The `DebugPubNames` struct represents the DWARF public names information found in the `.debug_pubnames` section.",null,null],[3,"PubNamesEntry","","A single parsed pubname.",null,null],[3,"PubNamesEntryIter","","An iterator over the pubnames from a `.debug_pubnames` section.",null,null],[3,"DebugPubTypes","","The `DebugPubTypes` struct represents the DWARF public types information found in the `.debug_info` section.",null,null],[3,"PubTypesEntry","","A single parsed pubtype.",null,null],[3,"PubTypesEntryIter","","An iterator over the pubtypes from a `.debug_pubtypes` section.",null,null],[3,"DebugRanges","","The `DebugRanges` struct represents the DWARF strings found in the `.debug_ranges` section.",null,null],[3,"DebugRangesOffset","","An offset into the `.debug_ranges` section.",null,null],[12,"0","","",40,null],[3,"Range","","An address range from the `.debug_ranges` section.",null,null],[12,"begin","","The beginning address of the range.",41,null],[12,"end","","The first address past the end of the range.",41,null],[3,"RangesIter","","An iterator over an address range list.",null,null],[3,"RawRangesIter","","A raw iterator over an address range list.",null,null],[3,"DebugStrOffset","","An offset into the `.debug_str` section.",null,null],[12,"0","","",42,null],[3,"DebugStr","","The `DebugStr` struct represents the DWARF strings found in the `.debug_str` section.",null,null],[3,"CompilationUnitHeader","","The header of a compilation unit's debugging information.",null,null],[3,"CompilationUnitHeadersIter","","An iterator over the compilation- and partial-units of a section.",null,null],[3,"DebugInfo","","The `DebugInfo` struct represents the DWARF debugging information found in the `.debug_info` section.",null,null],[3,"DebugInfoOffset","","An offset into the `.debug_info` section.",null,null],[12,"0","","",43,null],[3,"UnitOffset","","An offset into the current compilation or type unit.",null,null],[12,"0","","",44,null],[3,"DebugTypeSignature","","A type signature as used in the `.debug_types` section.",null,null],[12,"0","","",45,null],[3,"DebugTypes","","The `DebugTypes` struct represents the DWARF type information found in the `.debug_types` section.",null,null],[3,"DebugTypesOffset","","An offset into the `.debug_types` section.",null,null],[12,"0","","",46,null],[3,"TypeUnitHeader","","The header of a type unit's debugging information.",null,null],[3,"TypeUnitHeadersIter","","An iterator over the type-units of this `.debug_types` section.",null,null],[3,"DebuggingInformationEntry","","A Debugging Information Entry (DIE).",null,null],[3,"EntriesCursor","","A cursor into the Debugging Information Entries tree for a compilation unit.",null,null],[3,"EntriesTree","","The state information for a tree view of the Debugging Information Entries.",null,null],[3,"EntriesTreeIter","","An iterator that allows traversal of the children of an `EntriesTreeNode`.",null,null],[3,"EntriesTreeNode","","A node in the Debugging Information Entry tree.",null,null],[3,"Attribute","","An attribute in a `DebuggingInformationEntry`, consisting of a name and associated value.",null,null],[3,"AttrsIter","","An iterator over a particular entry's attributes.",null,null],[4,"CieOrFde","","Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).",null,null],[13,"Cie","","This CFI entry is a `CommonInformationEntry`.",47,null],[13,"Fde","","This CFI entry is a `FrameDescriptionEntry`, however fully parsing it requires parsing its CIE first, so it is left in a partially parsed state.",47,null],[4,"CfaRule","","The canonical frame address (CFA) recovery rules.",null,null],[13,"RegisterAndOffset","","The CFA is given offset from the given register's value.",48,null],[12,"register","gimli::CfaRule","The register containing the base value.",48,null],[12,"offset","","The offset from the register's base value.",48,null],[13,"Expression","gimli","The CFA is obtained by evaluating this `Reader` as a DWARF expression program.",48,null],[4,"RegisterRule","","An entry in the abstract CFI table that describes how to find the value of a register.",null,null],[13,"Undefined","","A register that has this rule has no recoverable value in the previous > frame. (By convention, it is not preserved by a callee.)",49,null],[13,"SameValue","","This register has not been modified from the previous frame. (By > convention, it is preserved by the callee, but the callee has not > modified it.)",49,null],[13,"Offset","","\"The previous value of this register is saved at the address CFA+N where CFA is the current CFA value and N is a signed offset.\"",49,null],[13,"ValOffset","","\"The previous value of this register is the value CFA+N where CFA is the current CFA value and N is a signed offset.\"",49,null],[13,"Register","","\"The previous value of this register is stored in another register numbered R.\"",49,null],[13,"Expression","","\"The previous value of this register is located at the address produced by executing the DWARF expression.\"",49,null],[13,"ValExpression","","\"The previous value of this register is the value produced by executing the DWARF expression.\"",49,null],[13,"Architectural","","\"The rule is defined externally to this specification by the augmenter.\"",49,null],[4,"CallFrameInstruction","","A parsed call frame instruction.",null,null],[13,"SetLoc","","",50,null],[12,"address","gimli::CallFrameInstruction","The target address.",50,null],[13,"AdvanceLoc","gimli","The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and `DW_CFA_advance_loc{1,2,4}`.",50,null],[12,"delta","gimli::CallFrameInstruction","The delta to be added to the current address.",50,null],[13,"DefCfa","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"offset","","The non-factored offset.",50,null],[13,"DefCfaSf","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"factored_offset","","The factored offset.",50,null],[13,"DefCfaRegister","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[13,"DefCfaOffset","gimli","",50,null],[12,"offset","gimli::CallFrameInstruction","The non-factored offset.",50,null],[13,"DefCfaOffsetSf","gimli","",50,null],[12,"factored_offset","gimli::CallFrameInstruction","The factored offset.",50,null],[13,"DefCfaExpression","gimli","",50,null],[12,"expression","gimli::CallFrameInstruction","The DWARF expression.",50,null],[13,"Undefined","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[13,"SameValue","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[13,"Offset","gimli","The `Offset` instruction represents both `DW_CFA_offset` and `DW_CFA_offset_extended`.",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"factored_offset","","The factored offset.",50,null],[13,"OffsetExtendedSf","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"factored_offset","","The factored offset.",50,null],[13,"ValOffset","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"factored_offset","","The factored offset.",50,null],[13,"ValOffsetSf","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"factored_offset","","The factored offset.",50,null],[13,"Register","gimli","",50,null],[12,"dest_register","gimli::CallFrameInstruction","The number of the register whose rule is being changed.",50,null],[12,"src_register","","The number of the register where the other register's value can be found.",50,null],[13,"Expression","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"expression","","The DWARF expression.",50,null],[13,"ValExpression","gimli","",50,null],[12,"register","gimli::CallFrameInstruction","The target register's number.",50,null],[12,"expression","","The DWARF expression.",50,null],[13,"Restore","gimli","The `Restore` instruction represents both `DW_CFA_restore` and `DW_CFA_restore_extended`.",50,null],[12,"register","gimli::CallFrameInstruction","The register to be reset.",50,null],[13,"RememberState","gimli","",50,null],[13,"RestoreState","","",50,null],[13,"Nop","","",50,null],[4,"RunTimeEndian","","Byte order that is selectable at runtime.",null,null],[13,"Little","","Little endian byte order.",51,null],[13,"Big","","Big endian byte order.",51,null],[4,"Error","","An error that occurred when parsing.",null,null],[13,"Io","","An I/O error occurred while reading.",52,null],[13,"CfiRelativePointerButCfiBaseIsUndefined","","Found a CFI relative pointer, but the CFI base is undefined.",52,null],[13,"TextRelativePointerButTextBaseIsUndefined","","Found a `.text` relative pointer, but the `.text` base is undefined.",52,null],[13,"DataRelativePointerButDataBaseIsUndefined","","Found a `.data` relative pointer, but the `.data` base is undefined.",52,null],[13,"FuncRelativePointerInBadContext","","Found a function relative pointer in a context that does not have a function base.",52,null],[13,"BadUnsignedLeb128","","An error parsing an unsigned LEB128 value.",52,null],[13,"BadSignedLeb128","","An error parsing a signed LEB128 value.",52,null],[13,"AbbreviationTagZero","","An abbreviation declared that its tag is zero, but zero is reserved for null records.",52,null],[13,"AttributeFormZero","","An attribute specification declared that its form is zero, but zero is reserved for null records.",52,null],[13,"BadHasChildren","","The abbreviation's has-children byte was not one of `DW_CHILDREN_{yes,no}`.",52,null],[13,"BadLength","","The specified length is impossible.",52,null],[13,"UnknownForm","","Found an unknown `DW_FORM_*` type.",52,null],[13,"ExpectedZero","","Expected a zero, found something else.",52,null],[13,"DuplicateAbbreviationCode","","Found an abbreviation code that has already been used.",52,null],[13,"DuplicateArange","","Found a duplicate arange.",52,null],[13,"UnknownReservedLength","","Found an unknown reserved length value.",52,null],[13,"UnknownVersion","","Found an unknown DWARF version.",52,null],[13,"UnknownAbbreviation","","Found a record with an unknown abbreviation code.",52,null],[13,"UnexpectedEof","","Hit the end of input before it was expected.",52,null],[13,"UnexpectedNull","","Read a null entry before it was expected.",52,null],[13,"UnknownStandardOpcode","","Found an unknown standard opcode.",52,null],[13,"UnknownExtendedOpcode","","Found an unknown extended opcode.",52,null],[13,"UnsupportedAddressSize","","The specified address size is not supported.",52,null],[13,"UnsupportedFieldSize","","The specified field size is not supported.",52,null],[13,"MinimumInstructionLengthZero","","The minimum instruction length must not be zero.",52,null],[13,"MaximumOperationsPerInstructionZero","","The maximum operations per instruction must not be zero.",52,null],[13,"LineRangeZero","","The line range must not be zero.",52,null],[13,"OpcodeBaseZero","","The opcode base must not be zero.",52,null],[13,"BadUtf8","","Found an invalid UTF-8 string.",52,null],[13,"NotCieId","","Expected to find the CIE ID, but found something else.",52,null],[13,"NotCiePointer","","Expected to find a pointer to a CIE, but found the CIE ID instead.",52,null],[13,"BadBranchTarget","","Invalid branch target for a DW_OP_bra or DW_OP_skip.",52,null],[13,"InvalidPushObjectAddress","","DW_OP_push_object_address used but no address passed in.",52,null],[13,"NotEnoughStackItems","","Not enough items on the stack when evaluating an expression.",52,null],[13,"TooManyIterations","","Too many iterations to compute the expression.",52,null],[13,"InvalidExpression","","An unrecognized operation was found while parsing a DWARF expression.",52,null],[13,"InvalidPiece","","The expression had a piece followed by an expression terminator without a piece.",52,null],[13,"InvalidExpressionTerminator","","An expression-terminating operation was followed by something other than the end of the expression or a piece operation.",52,null],[13,"DivisionByZero","","Division or modulus by zero when evaluating an expression.",52,null],[13,"UnknownCallFrameInstruction","","An unknown DW_CFA_* instruction.",52,null],[13,"InvalidAddressRange","","The end of an address range was before the beginning.",52,null],[13,"InvalidLocationAddressRange","","The end offset of a loc list entry was before the beginning.",52,null],[13,"CfiInstructionInInvalidContext","","Encountered a call frame instruction in a context in which it is not valid.",52,null],[13,"PopWithEmptyStack","","When evaluating call frame instructions, found a `DW_CFA_restore_state` stack pop instruction, but the stack was empty, and had nothing to pop.",52,null],[13,"NoUnwindInfoForAddress","","Do not have unwind info for the given address.",52,null],[13,"UnsupportedOffset","","An offset value was larger than the maximum supported value.",52,null],[13,"UnknownPointerEncoding","","The given pointer encoding is either unknown or invalid.",52,null],[13,"NoEntryAtGivenOffset","","Did not find an entry at the given offset.",52,null],[13,"OffsetOutOfBounds","","The given offset is out of bounds.",52,null],[13,"UnknownAugmentation","","Found an unknown CFI augmentation.",52,null],[13,"UnsupportedPointerEncoding","","We do not support the given pointer encoding yet.",52,null],[13,"CannotFitInU8","","We tried to convert some number into a `u8`, but it was too large.",52,null],[13,"TooManyRegisterRules","","The CFI program defined more register rules than we have storage for.",52,null],[13,"CfiStackFull","","Attempted to push onto the CFI stack, but it was already at full capacity.",52,null],[13,"VariableLengthSearchTable","","The `.eh_frame_hdr` binary search table claims to be variable-length encoded, which makes binary search impossible.",52,null],[13,"UnsupportedUnitType","","The `DW_UT_*` value for this unit is not supported yet.",52,null],[4,"Format","","Whether the format of a compilation unit is 32- or 64-bit.",null,null],[13,"Dwarf64","","64-bit DWARF",53,null],[13,"Dwarf32","","32-bit DWARF",53,null],[4,"Pointer","","A decoded pointer.",null,null],[13,"Direct","","This value is the decoded pointer value.",54,null],[13,"Indirect","","This value is not the pointer value, but points to the address of where the real pointer value lives. In other words, deref this pointer to get the real pointer value.",54,null],[4,"Opcode","","A parsed line number program opcode.",null,null],[13,"Special","","6.2.5.1 Special Opcodes > > Each ubyte special opcode has the following effect on the state machine: > >   1. Add a signed integer to the line register. > >   2. Modify the operation pointer by incrementing the address and >   op_index registers as described below. > >   3. Append a row to the matrix using the current values of the state >   machine registers. > >   4. Set the basic_block register to “false.” > >   5. Set the prologue_end register to “false.” > >   6. Set the epilogue_begin register to “false.” > >   7. Set the discriminator register to 0. > > All of the special opcodes do those same seven things; they differ from > one another only in what values they add to the line, address and > op_index registers.",55,null],[13,"Copy","","\"[`Opcode::Copy`] appends a row to the matrix using the current values of the state machine registers. Then it sets the discriminator register to 0, and sets the basic_block, prologue_end and epilogue_begin registers to “false.”\"",55,null],[13,"AdvancePc","","\"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as the operation advance and modifies the address and op_index registers [the same as `Opcode::Special`]\"",55,null],[13,"AdvanceLine","","\"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and adds that value to the line register of the state machine.\"",55,null],[13,"SetFile","","\"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and stores it in the file register of the state machine.\"",55,null],[13,"SetColumn","","\"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and stores it in the column register of the state machine.\"",55,null],[13,"NegateStatement","","\"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt register of the state machine to the logical negation of its current value.\"",55,null],[13,"SetBasicBlock","","\"The DW_LNS_set_basic_block opcode takes no operands. It sets the basic_block register of the state machine to “true.”\"",55,null],[13,"ConstAddPc","","The DW_LNS_const_add_pc opcode takes no operands. It advances the > address and op_index registers by the increments corresponding to > special opcode 255. > > When the line number program needs to advance the address by a small > amount, it can use a single special opcode, which occupies a single > byte. When it needs to advance the address by up to twice the range of > the last special opcode, it can use DW_LNS_const_add_pc followed by a > special opcode, for a total of two bytes. Only if it needs to advance > the address by more than twice that range will it need to use both > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.",55,null],[13,"FixedAddPc","","The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded) > operand and adds it to the address register of the state machine and > sets the op_index register to 0. This is the only standard opcode whose > operand is not a variable length number. It also does not multiply the > operand by the minimum_instruction_length field of the header.",55,null],[13,"SetPrologueEnd","","\"[`Opcode::SetPrologueEnd`] sets the prologue_end register to “true”.\"",55,null],[13,"SetEpilogueBegin","","\"[`Opcode::SetEpilogueBegin`] sets the epilogue_begin register to “true”.\"",55,null],[13,"SetIsa","","\"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and stores that value in the isa register of the state machine.\"",55,null],[13,"UnknownStandard0","","An unknown standard opcode with zero operands.",55,null],[13,"UnknownStandard1","","An unknown standard opcode with one operand.",55,null],[13,"UnknownStandardN","","An unknown standard opcode with multiple operands.",55,null],[13,"EndSequence","","[`Opcode::EndSequence`] sets the end_sequence register of the state > machine to “true” and appends a row to the matrix using the current > values of the state-machine registers. Then it resets the registers to > the initial values specified above (see Section 6.2.2). Every line > number program sequence must end with a DW_LNE_end_sequence instruction > which creates a row whose address is that of the byte after the last > target machine instruction of the sequence.",55,null],[13,"SetAddress","","The DW_LNE_set_address opcode takes a single relocatable address as an > operand. The size of the operand is the size of an address on the target > machine. It sets the address register to the value given by the > relocatable address and sets the op_index register to 0. > > All of the other line number program opcodes that affect the address > register add a delta to it. This instruction stores a relocatable value > into it instead.",55,null],[13,"DefineFile","","Defines a new source file in the line number program and appends it to the line number program header's list of source files.",55,null],[13,"SetDiscriminator","","\"The DW_LNE_set_discriminator opcode takes a single parameter, an unsigned LEB128 integer. It sets the discriminator register to the new value.\"",55,null],[13,"UnknownExtended","","An unknown extended opcode and the slice of its unparsed operands.",55,null],[4,"ColumnType","","The type of column that a row is referring to.",null,null],[13,"LeftEdge","","The `LeftEdge` means that the statement begins at the start of the new line.",56,null],[13,"Column","","A column number, whose range begins at 1.",56,null],[4,"DieReference","","A reference to a DIE, either relative to the current CU or relative to the section.",null,null],[13,"UnitRef","","A CU-relative reference.",57,null],[13,"DebugInfoRef","","A section-relative reference.",57,null],[4,"Operation","","A single decoded DWARF expression operation.",null,null],[13,"Deref","","A dereference operation.",58,null],[12,"size","gimli::Operation","The size of the data to dereference.",58,null],[12,"space","","True if the dereference operation takes an address space argument; false otherwise.",58,null],[13,"Drop","gimli","Drop an item from the stack.",58,null],[13,"Pick","","Pick an item from the stack and push it on top of the stack. This operation handles `DW_OP_pick`, `DW_OP_dup`, and `DW_OP_over`.",58,null],[12,"index","gimli::Operation","The index, from the top of the stack, of the item to copy.",58,null],[13,"Swap","gimli","Swap the top two stack items.",58,null],[13,"Rot","","Rotate the top three stack items.",58,null],[13,"Abs","","Take the absolute value of the top of the stack.",58,null],[13,"And","","Bitwise `and` of the top two values on the stack.",58,null],[13,"Div","","Divide the top two values on the stack.",58,null],[13,"Minus","","Subtract the top two values on the stack.",58,null],[13,"Mod","","Modulus of the top two values on the stack.",58,null],[13,"Mul","","Multiply the top two values on the stack.",58,null],[13,"Neg","","Negate the top of the stack.",58,null],[13,"Not","","Bitwise `not` of the top of the stack.",58,null],[13,"Or","","Bitwise `or` of the top two values on the stack.",58,null],[13,"Plus","","Add the top two values on the stack.",58,null],[13,"PlusConstant","","Add a constant to the topmost value on the stack.",58,null],[12,"value","gimli::Operation","The value to add.",58,null],[13,"Shl","gimli","Logical left shift of the 2nd value on the stack by the number of bits given by the topmost value on the stack.",58,null],[13,"Shr","","Right shift of the 2nd value on the stack by the number of bits given by the topmost value on the stack.",58,null],[13,"Shra","","Arithmetic left shift of the 2nd value on the stack by the number of bits given by the topmost value on the stack.",58,null],[13,"Xor","","Bitwise `xor` of the top two values on the stack.",58,null],[13,"Bra","","Branch to the target location if the top of stack is nonzero.",58,null],[12,"target","gimli::Operation","The target bytecode.",58,null],[13,"Eq","gimli","Compare the top two stack values for equality.",58,null],[13,"Ge","","Compare the top two stack values using `>=`.",58,null],[13,"Gt","","Compare the top two stack values using `>`.",58,null],[13,"Le","","Compare the top two stack values using `<=`.",58,null],[13,"Lt","","Compare the top two stack values using `<`.",58,null],[13,"Ne","","Compare the top two stack values using `!=`.",58,null],[13,"Skip","","Unconditional branch to the target location.",58,null],[12,"target","gimli::Operation","The target bytecode.",58,null],[13,"Literal","gimli","Push a constant value on the stack.  This handles multiple DWARF opcodes.",58,null],[12,"value","gimli::Operation","The value to push.",58,null],[13,"Register","gimli","Indicate that this piece's location is in the given register.",58,null],[12,"register","gimli::Operation","The register number.",58,null],[13,"RegisterOffset","gimli","Find the value of the given register, add the offset, and then push the resulting sum on the stack.",58,null],[12,"register","gimli::Operation","The register number.",58,null],[12,"offset","","The offset to add.",58,null],[13,"FrameOffset","gimli","Compute the frame base (using `DW_AT_frame_base`), add the given offset, and then push the resulting sum on the stack.",58,null],[12,"offset","gimli::Operation","The offset to add.",58,null],[13,"Nop","gimli","No operation.",58,null],[13,"PushObjectAddress","","Push the object address on the stack.",58,null],[13,"Call","","Evaluate a DWARF expression as a subroutine.  The expression comes from the `DW_AT_location` attribute of the indicated DIE.",58,null],[12,"offset","gimli::Operation","The DIE to use.",58,null],[13,"TLS","gimli","Compute the address of a thread-local variable and push it on the stack.",58,null],[13,"CallFrameCFA","","Compute the call frame CFA and push it on the stack.",58,null],[13,"Piece","","Terminate a piece.",58,null],[12,"size_in_bits","gimli::Operation","The size of this piece in bits.",58,null],[12,"bit_offset","","The bit offset of this piece.  If `None`, then this piece was specified using `DW_OP_piece` and should start at the next byte boundary.",58,null],[13,"ImplicitValue","gimli","Represents `DW_OP_implicit_value`.",58,null],[12,"data","gimli::Operation","The implicit value to use.",58,null],[13,"StackValue","gimli","Represents `DW_OP_stack_value`.",58,null],[13,"ImplicitPointer","","Represents `DW_OP_implicit_pointer`. The object is a pointer to a value which has no actual location, such as an implicit value or a stack value.",58,null],[12,"value","gimli::Operation","The `.debug_info` offset of the value that this is an implicit pointer into.",58,null],[12,"byte_offset","","The byte offset into the value that the implicit pointer points to.",58,null],[13,"EntryValue","gimli","Represents `DW_OP_entry_value`. Evaluate an expression at the entry to the current subprogram, and push it on the stack.",58,null],[12,"expression","gimli::Operation","The expression to be evaluated.",58,null],[13,"ParameterRef","gimli","Represents `DW_OP_GNU_parameter_ref`. This represents a parameter that was optimized out. The offset points to the definition of the parameter, and is matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also points to the same definition of the parameter.",58,null],[12,"offset","gimli::Operation","The DIE to use.",58,null],[13,"TextRelativeOffset","gimli","An offset relative to the base of the .text section of the binary. e.g. for `DW_OP_addr`.",58,null],[12,"offset","gimli::Operation","The offfset to add.",58,null],[4,"Location","gimli","A single location of a piece of the result of a DWARF expression.",null,null],[13,"Empty","","The piece is empty.  Ordinarily this means the piece has been optimized away.",59,null],[13,"Register","","The piece is found in a register.",59,null],[12,"register","gimli::Location","The register number.",59,null],[13,"Address","gimli","The piece is found in memory.",59,null],[12,"address","gimli::Location","The address.",59,null],[13,"Scalar","gimli","The piece is a scalar value.",59,null],[12,"value","gimli::Location","The value.",59,null],[13,"Bytes","gimli","The piece is represented by some constant bytes.",59,null],[12,"value","gimli::Location","The value.",59,null],[13,"ImplicitPointer","gimli","The piece is a pointer to a value which has no actual location.",59,null],[12,"value","gimli::Location","The `.debug_info` offset of the value that this is an implicit pointer into.",59,null],[12,"byte_offset","","The byte offset into the value that the implicit pointer points to.",59,null],[4,"EvaluationResult","gimli","The state of an `Evaluation` after evaluating a DWARF expression. The evaluation is either `Complete`, or it requires more data to continue, as described by the variant.",null,null],[13,"Complete","","The `Evaluation` is complete, and `Evaluation::result()` can be called.",60,null],[13,"RequiresMemory","","The `Evaluation` needs a value from memory to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_memory`.",60,null],[12,"address","gimli::EvaluationResult","The address of the value required.",60,null],[12,"size","","The size of the value required. This is guaranteed to be at most the word size of the target architecture.",60,null],[12,"space","","If not `None`, a target-specific address space value.",60,null],[13,"RequiresRegister","gimli","The `Evaluation` needs a value from a register to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_register`.",60,null],[13,"RequiresFrameBase","","The `Evaluation` needs the frame base address to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame base address is the address produced by the location description in the `DW_AT_frame_base` attribute of the current function.",60,null],[13,"RequiresTls","","The `Evaluation` needs a value from TLS to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_tls`.",60,null],[13,"RequiresCallFrameCfa","","The `Evaluation` needs the CFA to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_call_frame_cfa`.",60,null],[13,"RequiresAtLocation","","The `Evaluation` needs the DWARF expression at the given location to proceed further.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_at_location`.",60,null],[13,"RequiresEntryValue","","The `Evaluation` needs the value produced by evaluating a DWARF expression at the entry point of the current subprogram.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_entry_value`.",60,null],[13,"RequiresParameterRef","","The `Evaluation` needs the value of the parameter at the given location in the current function's caller.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_parameter_ref`.",60,null],[13,"RequiresTextBase","","The `Evaluation` needs the base address of the .text section of the binary to proceed.  Once the caller determines what value to provide it should resume the `Evaluation` by calling `Evaluation::resume_with_text_base`.",60,null],[4,"AttributeValue","","The value of an attribute in a `DebuggingInformationEntry`.",null,null],[13,"Addr","","\"Refers to some location in the address space of the described program.\"",61,null],[13,"Block","","A slice of an arbitrary number of bytes.",61,null],[13,"Data1","","A one byte constant data value. How to interpret the byte depends on context.",61,null],[13,"Data2","","A two byte constant data value. How to interpret the bytes depends on context.",61,null],[13,"Data4","","A four byte constant data value. How to interpret the bytes depends on context.",61,null],[13,"Data8","","An eight byte constant data value. How to interpret the bytes depends on context.",61,null],[13,"Sdata","","A signed integer constant.",61,null],[13,"Udata","","An unsigned integer constant.",61,null],[13,"Exprloc","","\"The information bytes contain a DWARF expression (see Section 2.5) or location description (see Section 2.6).\"",61,null],[13,"Flag","","A boolean typically used to describe the presence or absence of another attribute.",61,null],[13,"SecOffset","","An offset into another section. Which section this is an offset into depends on context.",61,null],[13,"UnitRef","","An offset into the current compilation unit.",61,null],[13,"DebugInfoRef","","An offset into the current `.debug_info` section, but possibly a different compilation unit from the current one.",61,null],[13,"DebugLineRef","","An offset into the `.debug_line` section.",61,null],[13,"DebugLocRef","","An offset into the `.debug_loc` section.",61,null],[13,"DebugMacinfoRef","","An offset into the `.debug_macinfo` section.",61,null],[13,"DebugRangesRef","","An offset into the `.debug_ranges` section.",61,null],[13,"DebugTypesRef","","A type signature.",61,null],[13,"DebugStrRef","","An offset into the `.debug_str` section.",61,null],[13,"String","","A slice of bytes representing a string. Does not include a final null byte. Not guaranteed to be UTF-8 or anything like that.",61,null],[13,"Encoding","","The value of a `DW_AT_encoding` attribute.",61,null],[13,"DecimalSign","","The value of a `DW_AT_decimal_sign` attribute.",61,null],[13,"Endianity","","The value of a `DW_AT_endianity` attribute.",61,null],[13,"Accessibility","","The value of a `DW_AT_accessibility` attribute.",61,null],[13,"Visibility","","The value of a `DW_AT_visibility` attribute.",61,null],[13,"Virtuality","","The value of a `DW_AT_virtuality` attribute.",61,null],[13,"Language","","The value of a `DW_AT_language` attribute.",61,null],[13,"AddressClass","","The value of a `DW_AT_address_class` attribute.",61,null],[13,"IdentifierCase","","The value of a `DW_AT_identifier_case` attribute.",61,null],[13,"CallingConvention","","The value of a `DW_AT_calling_convention` attribute.",61,null],[13,"Inline","","The value of a `DW_AT_inline` attribute.",61,null],[13,"Ordering","","The value of a `DW_AT_ordering` attribute.",61,null],[13,"FileIndex","","An index into the filename entries from the line number information table for the compilation unit containing this value.",61,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"debugframeoffset"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"debugframeoffset"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"debugframeoffset"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ehframeoffset"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ehframeoffset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ehframeoffset"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"debugframe"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"debugframe"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"debugframe"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `DebugFrame` instance from the data in the `.debug_frame` section.",62,null],[11,"section_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",62,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ehframehdr"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"ehframehdr"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"ehframehdr"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"parsedehframehdr"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.",63,null],[11,"parse","","Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.",63,{"inputs":[{"name":"self"},{"name":"baseaddresses"},{"name":"u8"}],"output":{"name":"result"}}],[11,"section_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",63,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"eh_frame_ptr","","Returns the address of the binary's `.eh_frame` section.",64,{"inputs":[{"name":"self"}],"output":{"name":"pointer"}}],[11,"table","","Retrieves the CFI binary search table, if there is one.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"ehhdrtable"}}],[11,"lookup","","Probably returns a pointer to the FDE for the given address.",65,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"baseaddresses"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ehframe"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"ehframe"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"ehframe"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `EhFrame` instance from the data in the `.debug_frame` section.",66,null],[11,"section_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",66,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"baseaddresses"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"baseaddresses"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"baseaddresses"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"baseaddresses"}],"output":{"name":"bool"}}],[11,"set_cfi","","Set the CFI section base address.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"set_text","","Set the `.text` section base address.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"set_data","","Set the `.data` section base address.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"cfientriesiter"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next entry.",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"cieorfde"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"cieorfde"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"cieorfde"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"augmentation"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"augmentation"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"augmentation"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"augmentation"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"commoninformationentry"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"commoninformationentry"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"commoninformationentry"}],"output":{"name":"bool"}}],[11,"offset","","Get the offset of this entry from the start of its containing section.",69,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"instructions","","Iterate over this CIE's initial instructions.",69,{"inputs":[{"name":"self"}],"output":{"name":"callframeinstructioniter"}}],[11,"entry_len","","A constant that gives the number of bytes of the CIE structure, not > including the length field itself (see Section 7.2.2). The size of the > length field plus the value of length must be an integral multiple of > the address size.",69,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"version","","A version number (see Section 7.23). This number is specific to the > call frame information and is independent of the DWARF version number.",69,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"augmentation","","Get the augmentation data, if any exists.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"code_alignment_factor","","A constant that is factored out of all advance location instructions > (see Section 6.4.2.1).",69,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"data_alignment_factor","","A constant that is factored out of certain offset instructions (see > below). The resulting value is (operand * data_alignment_factor).",69,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"return_address_register","","An unsigned ... constant that indicates which column in the rule > table represents the return address of the function. Note that this > column might not correspond to an actual machine register.",69,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"partialframedescriptionentry"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"partialframedescriptionentry"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"partialframedescriptionentry"}],"output":{"name":"bool"}}],[11,"parse","","Fully parse this FDE.",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"framedescriptionentry"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"framedescriptionentry"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"framedescriptionentry"}],"output":{"name":"bool"}}],[11,"offset","","Get the offset of this entry from the start of its containing section.",71,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"cie","","Get a reference to this FDE's CIE.",71,{"inputs":[{"name":"self"}],"output":{"name":"commoninformationentry"}}],[11,"entry_len","","A constant that gives the number of bytes of the header and > instruction stream for this function, not including the length field > itself (see Section 7.2.2). The size of the length field plus the value > of length must be an integral multiple of the address size.",71,{"inputs":[{"name":"self"}],"output":{"name":"offset"}}],[11,"instructions","","Iterate over this FDE's instructions.",71,{"inputs":[{"name":"self"}],"output":{"name":"callframeinstructioniter"}}],[11,"initial_address","","The first address for which this entry has unwind information for.",71,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"len","","The number of bytes of instructions that this entry has unwind information for.",71,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"contains","","Return `true` if the given address is within this FDE, `false` otherwise.",71,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"lsda","","The address of this FDE's language-specific data area (LSDA), if it has any.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_signal_trampoline","","Return true if this FDE's function is a trampoline for a signal handler.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"personality","","Return the address of the FDE's function's personality routine handler. The personality routine does language-specific clean up when unwinding the stack frames with the intent to not run them again.",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"uninitializedunwindcontext"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new call frame unwinding context.",72,{"inputs":[],"output":{"name":"uninitializedunwindcontext"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"initialize","","Run the CIE's initial instructions, creating an `InitializedUnwindContext`.",72,{"inputs":[{"name":"self"},{"name":"commoninformationentry"}],"output":{"name":"unwindresult"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"initializedunwindcontext"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset","","Reset this context to the uninitialized state.",73,{"inputs":[{"name":"self"}],"output":{"name":"uninitializedunwindcontext"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `UnwindTable` for the given `FrameDescriptionEntry`'s CFI unwinding program.",74,{"inputs":[{"name":"initializedunwindcontext"},{"name":"framedescriptionentry"}],"output":{"name":"unwindtable"}}],[11,"next_row","","Evaluate call frame instructions until the next row of the table is completed, and return it.",74,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"registerruleiter"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unwindtablerow"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"unwindtablerow"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"unwindtablerow"}],"output":{"name":"bool"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"start_address","","Get the starting PC address that this row applies to.",76,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"end_address","","Get the end PC address where this row's register rules become unapplicable.",76,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"contains","","Return `true` if the given `address` is within this row's address range, `false` otherwise.",76,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"cfa","","Get the canonical frame address (CFA) recovery rule for this row.",76,{"inputs":[{"name":"self"}],"output":{"name":"cfarule"}}],[11,"register","","Get the register recovery rule for the given register number.",76,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"registerrule"}}],[11,"registers","","Iterate over all defined register `(number, rule)` pairs.",76,{"inputs":[{"name":"self"}],"output":{"name":"registerruleiter"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"cfarule"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"cfarule"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"cfarule"}],"output":{"name":"bool"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"registerrule"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"registerrule"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"registerrule"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"callframeinstruction"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"callframeinstruction"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"callframeinstruction"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"callframeinstructioniter"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Parse the next call frame instruction.",77,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",77,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"dwut"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"dwut"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"dwut"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"dwcfa"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"dwcfa"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"dwcfa"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"dwchildren"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"dwchildren"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"dwchildren"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"dwtag"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"dwtag"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"dwtag"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"dwat"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"dwat"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"dwat"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"dwform"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"dwform"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"dwform"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dwate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"dwate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"dwate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"dwlle"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"dwlle"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"dwlle"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"dwds"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"dwds"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"dwds"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"dwend"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"dwend"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"dwend"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"dwaccess"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"dwaccess"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"dwaccess"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"dwvis"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"dwvis"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"dwvis"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"dwvirtuality"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"dwvirtuality"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"dwvirtuality"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"dwlang"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"dwlang"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"dwlang"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_lower_bound","","Get the default DW_AT_lower_bound for this language.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"dwaddr"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"dwaddr"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"dwaddr"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"dwid"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"dwid"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"dwid"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"dwcc"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"dwcc"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"dwcc"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"dwinl"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"dwinl"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"dwinl"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dword"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"dword"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"dword"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"dwdsc"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"dwdsc"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"dwdsc"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dwidx"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"dwidx"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"dwidx"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"dwdefaulted"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"dwdefaulted"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"dwdefaulted"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dwlns"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"dwlns"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"dwlns"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dwlne"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"dwlne"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"dwlne"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"dwlnct"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"dwlnct"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"dwlnct"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dwmacro"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"dwmacro"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"dwmacro"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dwrle"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"dwrle"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"dwrle"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dwop"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"dwop"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"dwop"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dwehpe"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"dwehpe"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"dwehpe"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"format","","Get the pointer encoding's format.",31,{"inputs":[{"name":"self"}],"output":{"name":"dwehpe"}}],[11,"application","","Get the pointer encoding's application.",31,{"inputs":[{"name":"self"}],"output":{"name":"dwehpe"}}],[11,"is_absent","","Is this encoding the absent pointer encoding?",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_indirect","","Is this coding indirect? If so, its encoded value is the address of the real pointer result, not the pointer result itself.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_valid_encoding","","Is this a known, valid pointer encoding?",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"runtimeendian"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"runtimeendian"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"runtimeendian"}}],[11,"is_big_endian","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"littleendian"}}],[11,"is_big_endian","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"default","","",79,{"inputs":[],"output":{"name":"bigendian"}}],[11,"is_big_endian","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"endianbuf"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"endianbuf"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"endianbuf"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"new","","Construct a new `EndianBuf` with the given buffer.",80,null],[11,"buf","","Return a reference to the raw buffer.",80,null],[11,"split_at","","Split the buffer in two at the given index, resulting in the tuple where the first item has range [0, idx), and the second has range [idx, len). Panics if the index is out of bounds.",80,null],[11,"find","","Find the first occurence of a byte in the buffer, and return its index.",80,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"offset_from","","Return the offset of the start of the buffer relative to the start of the given buffer.",80,{"inputs":[{"name":"self"},{"name":"endianbuf"}],"output":{"name":"usize"}}],[11,"to_string","","Converts the buffer to a string using `str::from_utf8`.",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts the buffer to a string, including invalid characters, using `String::from_utf8_lossy`.",80,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"range","","Take the given `start..end` range of the underlying buffer and return a new `EndianBuf`.",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"endianbuf"}}],[11,"range_from","","Take the given `start..` range of the underlying buffer and return a new `EndianBuf`.",80,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"endianbuf"}}],[11,"range_to","","Take the given `..end` range of the underlying buffer and return a new `EndianBuf`.",80,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"endianbuf"}}],[11,"index","","",80,null],[11,"index","","",80,null],[11,"deref","","",80,null],[11,"into","","",80,null],[11,"endian","","",80,{"inputs":[{"name":"self"}],"output":{"name":"endian"}}],[11,"len","","",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty","","",80,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","",80,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"offset_from","","",80,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"find","","",80,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"skip","","",80,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"split","","",80,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"to_slice","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_string_lossy","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8_array","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u8","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","",80,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"leb128","","Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length integer encoding.",null,null],[0,"read","gimli::leb128","A module for reading signed and unsigned integers that have been LEB128 encoded.",null,null],[5,"unsigned","gimli::leb128::read","Read an unsigned LEB128 number from the given `Reader` and return it or an error if reading failed.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"signed","","Read a signed LEB128 number from the given `Reader` and return it or an error if reading failed.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"write","gimli::leb128","A module for writing integers encoded as LEB128.",null,null],[5,"unsigned","gimli::leb128::write","Write the given unsigned number using the LEB128 encoding to the given `std::io::Write`able. Returns the number of bytes written to `w`, or an error if writing failed.",null,{"inputs":[{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[5,"signed","","Write the given signed number using the LEB128 encoding to the given `std::io::Write`able. Returns the number of bytes written to `w`, or an error if writing failed.",null,{"inputs":[{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"fmt","gimli","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A short description of the error.",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",52,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",52,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pointer"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"pointer"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"pointer"}],"output":{"name":"bool"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"debugmacinfooffset"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"debugmacinfooffset"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"debugmacinfooffset"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"debugabbrevoffset"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"debugabbrevoffset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"debugabbrevoffset"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"debugabbrev"}}],[11,"new","","Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev` section.",81,null],[11,"abbreviations","","Parse the abbreviations at the given `offset` within this `.debug_abbrev` section.",81,{"inputs":[{"name":"self"},{"name":"debugabbrevoffset"}],"output":{"name":"result"}}],[11,"section_name","","",81,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",81,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"abbreviations"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"abbreviations"}}],[11,"get","","Get the abbreviation associated with the given code.",82,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"abbreviation"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"abbreviation"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"abbreviation"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `Abbreviation`.",83,{"inputs":[{"name":"u64"},{"name":"dwtag"},{"name":"dwchildren"},{"name":"vec"}],"output":{"name":"abbreviation"}}],[11,"code","","Get this abbreviation's code.",83,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"tag","","Get this abbreviation's tag.",83,{"inputs":[{"name":"self"}],"output":{"name":"dwtag"}}],[11,"has_children","","Return true if this abbreviation's type has children, false otherwise.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attributes","","Get this abbreviation's attributes.",83,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"attributespecification"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"attributespecification"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"attributespecification"}],"output":{"name":"bool"}}],[11,"new","","Construct a new `AttributeSpecification` from the given name and form and implicit const value.",84,{"inputs":[{"name":"dwat"},{"name":"dwform"},{"name":"option"}],"output":{"name":"attributespecification"}}],[11,"name","","Get the attribute's name.",84,{"inputs":[{"name":"self"}],"output":{"name":"dwat"}}],[11,"form","","Get the attribute's form.",84,{"inputs":[{"name":"self"}],"output":{"name":"dwform"}}],[11,"implicit_const_value","","Get the attribute's implicit const value.",84,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"size","","Return the size of the attribute, in bytes.",84,{"inputs":[{"name":"self"},{"name":"unitheader"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"arangeentry"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"arangeentry"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"arangeentry"}],"output":{"name":"bool"}}],[11,"segment","","Return the segment selector of this arange.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"address","","Return the beginning address of this arange.",85,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"length","","Return the length of this arange.",85,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"debug_info_offset","","Return the offset into the .debug_info section for this arange.",85,{"inputs":[{"name":"self"}],"output":{"name":"debuginfooffset"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"arangeentry"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"arangeentry"}],"output":{"name":"ordering"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"debugaranges"}}],[11,"new","","Construct a new `DebugAranges` instance from the data in the `.debug_aranges` section.",86,null],[11,"items","","Iterate the aranges in the `.debug_aranges` section.",86,{"inputs":[{"name":"self"}],"output":{"name":"arangeentryiter"}}],[11,"section_name","","",86,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",86,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"arangeentryiter"}}],[11,"next","","Advance the iterator and return the next arange.",87,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",87,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"debuglineoffset"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"debuglineoffset"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"debuglineoffset"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"debugline"}}],[11,"new","","Construct a new `DebugLine` instance from the data in the `.debug_line` section.",88,null],[11,"program","","Parse the line number program whose header is at the given `offset` in the `.debug_line` section.",88,{"inputs":[{"name":"self"},{"name":"debuglineoffset"},{"name":"u8"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"section_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",88,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"header","","",89,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[11,"add_file","","",89,{"inputs":[{"name":"self"},{"name":"fileentry"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"statemachine"}}],[11,"header","","Get a reference to the header for this state machine's line number program.",90,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[11,"next_row","","Parse and execute the next opcodes in the line number program until another row in the line number matrix is computed.",90,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run_to_address","","Parse and execute opcodes until we reach a row matching `addr`, the end of the program, or an error.",90,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"opcodesiter"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_opcode","","Advance the iterator and return the next opcode.",91,{"inputs":[{"name":"self"},{"name":"linenumberprogramheader"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"linenumberrow"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"linenumberrow"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"linenumberrow"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"linenumberrow"}],"output":{"name":"bool"}}],[11,"address","","\"The program-counter value corresponding to a machine instruction generated by the compiler.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"op_index","","An unsigned integer representing the index of an operation within a VLIW > instruction. The index of the first operation is 0. For non-VLIW > architectures, this register will always be 0. > > The address and op_index registers, taken together, form an operation > pointer that can reference any individual operation with the > instruction stream.",92,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"file_index","","\"An unsigned integer indicating the identity of the source file corresponding to a machine instruction.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"file","","The source file corresponding to the current machine instruction.",92,{"inputs":[{"name":"self"},{"name":"linenumberprogramheader"}],"output":{"name":"option"}}],[11,"line","","\"An unsigned integer indicating a source line number. Lines are numbered beginning at 1. The compiler may emit the value 0 in cases where an instruction cannot be attributed to any source line.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"column","","\"An unsigned integer indicating a column number within a source line. Columns are numbered beginning at 1. The value 0 is reserved to indicate that a statement begins at the “left edge” of the line.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"columntype"}}],[11,"is_stmt","","\"A boolean indicating that the current instruction is a recommended breakpoint location. A recommended breakpoint location is intended to “represent” a line, a statement and/or a semantically distinct subpart of a statement.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"basic_block","","\"A boolean indicating that the current instruction is the beginning of a basic block.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"end_sequence","","\"A boolean indicating that the current address is that of the first byte after the end of a sequence of target machine instructions. end_sequence terminates a sequence of lines; therefore other information in the same row is not meaningful.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"prologue_end","","\"A boolean indicating that the current address is one (of possibly many) where execution should be suspended for an entry breakpoint of a function.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"epilogue_begin","","\"A boolean indicating that the current address is one (of possibly many) where execution should be suspended for an exit breakpoint of a function.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"isa","","Tag for the current instruction set architecture.",92,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"discriminator","","\"An unsigned integer identifying the block to which the current instruction belongs. Discriminator values are assigned arbitrarily by the DWARF producer and serve to distinguish among multiple blocks that may all be associated with the same source file, line, and column. Where only one block exists for a given source position, the discriminator value should be zero.\"",92,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"columntype"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"columntype"}],"output":{"name":"ordering"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"linenumbersequence"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"linenumberprogramheader"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"linenumberprogramheader"}],"output":{"name":"bool"}}],[11,"unit_length","","Return the length of the line number program and header, not including the length of the encoded length itself.",93,null],[11,"version","","Get the version of this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"header_length","","Get the length of the encoded line number program header, not including the length of the encoded length itself.",93,null],[11,"minimum_instruction_length","","Get the minimum instruction length any opcode in this header's line program may have.",93,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"maximum_operations_per_instruction","","Get the maximum number of operations each instruction in this header's line program may have.",93,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"default_is_stmt","","Get the default value of the `is_stmt` register for this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"line_base","","Get the line base for this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"line_range","","Get the line range for this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"opcode_base","","Get opcode base for this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"standard_opcode_lengths","","The byte lengths of each standard opcode in this header's line program.",93,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"include_directories","","Get the set of include directories for this header's line program.",93,null],[11,"directory","","The include directory with the given directory index.",93,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"file_names","","Get the list of source files that appear in this header's line program.",93,null],[11,"file","","The source file with the given file index.",93,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"raw_program_buf","","Get the raw, un-parsed `EndianBuf` containing this header's line number program.",93,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"opcodes","","Iterate over the opcodes in this header's line number program, parsing them as we go.",93,{"inputs":[{"name":"self"}],"output":{"name":"opcodesiter"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"incompletelinenumberprogram"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"incompletelinenumberprogram"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"incompletelinenumberprogram"}],"output":{"name":"bool"}}],[11,"header","","Retrieve the `LineNumberProgramHeader` for this program.",89,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[11,"rows","","Construct a new `StateMachine` for executing line programs and generating the line information matrix.",89,{"inputs":[{"name":"self"}],"output":{"name":"statemachine"}}],[11,"sequences","","Execute the line number program, completing the `IncompleteLineNumberProgram` into a `CompleteLineNumberProgram` and producing an array of sequences within the line number program that can later be used with `CompleteLineNumberProgram::resume_from`.",89,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"completelinenumberprogram"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"completelinenumberprogram"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"completelinenumberprogram"}],"output":{"name":"bool"}}],[11,"header","","Retrieve the `LineNumberProgramHeader` for this program.",94,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[11,"resume_from","","Construct a new `StateMachine` for executing the subset of the line number program identified by 'sequence' and  generating the line information matrix.",94,{"inputs":[{"name":"self"},{"name":"linenumbersequence"}],"output":{"name":"statemachine"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"fileentry"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"fileentry"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"fileentry"}],"output":{"name":"bool"}}],[11,"path_name","","A slice containing the full or relative path name of > a source file. If the entry contains a file name or a relative path > name, the file is located relative to either the compilation directory > (as specified by the DW_AT_comp_dir attribute given in the compilation > unit) or one of the directories in the include_directories section.",95,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"directory_index","","An unsigned LEB128 number representing the directory index of the > directory in which the file was found. > > ... > > The directory index represents an entry in the include_directories > section of the line number program header. The index is 0 if the file > was found in the current directory of the compilation, 1 if it was found > in the first directory in the include_directories section, and so > on. The directory index is ignored for file names that represent full > path names.",95,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"directory","","Get this file's directory.",95,{"inputs":[{"name":"self"},{"name":"linenumberprogramheader"}],"output":{"name":"option"}}],[11,"last_modification","","\"An unsigned LEB128 number representing the time of last modification of the file, or 0 if not available.\"",95,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"length","","\"An unsigned LEB128 number representing the length in bytes of the file, or 0 if not available.\"",95,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"debuglocoffset"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"debuglocoffset"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"debuglocoffset"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"debugloc"}}],[11,"new","","Construct a new `DebugLoc` instance from the data in the `.debug_loc` section.",96,null],[11,"locations","","Iterate over the `LocationListEntry`s starting at the given offset.",96,{"inputs":[{"name":"self"},{"name":"debuglocoffset"},{"name":"u8"},{"name":"u64"}],"output":{"name":"result"}}],[11,"raw_locations","","Iterate over the raw `LocationListEntry`s starting at the given offset.",96,{"inputs":[{"name":"self"},{"name":"debuglocoffset"},{"name":"u8"}],"output":{"name":"result"}}],[11,"section_name","","",96,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",96,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a `RawLocationListIter`.",97,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"rawlocationlistiter"}}],[11,"next","","Advance the iterator to the next location.",97,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next location.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"locationlistentry"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"locationlistentry"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"locationlistentry"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"diereference"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"diereference"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"diereference"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if the piece is empty.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"piece"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"piece"}],"output":{"name":"bool"}}],[11,"parse","","Parse a single DWARF expression operation.",58,{"inputs":[{"name":"r"},{"name":"r"},{"name":"u8"},{"name":"format"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"evaluationresult"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"evaluationresult"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"expression"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"expression"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"evaluation","","Create an evaluation for this expression.",39,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"format"}],"output":{"name":"evaluation"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new DWARF expression evaluator.",99,{"inputs":[{"name":"r"},{"name":"u8"},{"name":"format"}],"output":{"name":"evaluation"}}],[11,"set_initial_value","","Set an initial value to be pushed on the DWARF expression evaluator's stack.  This can be used in cases like `DW_AT_vtable_elem_location`, which require a value on the stack before evaluation commences.  If no initial value is set, and the expression uses an opcode requiring the initial value, then evaluation will fail with an error.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_object_address","","Set the enclosing object's address, as used by `DW_OP_push_object_address`.  If no object address is set, and the expression uses an opcode requiring the object address, then evaluation will fail with an error.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"set_max_iterations","","Set the maximum number of iterations to be allowed by the expression evaluator.",99,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"result","","Get the result of this `Evaluation`.",99,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"evaluate","","Evaluate a DWARF expression.  This method should only ever be called once.  If the returned `EvaluationResult` is not `EvaluationResult::Complete`, the caller should provide the required value and resume the evaluation by calling the appropriate resume_with method on `Evaluation`.",99,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"resume_with_memory","","Resume the `Evaluation` with the provided memory `value`.  This will apply the provided memory value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_register","","Resume the `Evaluation` with the provided `register` value.  This will apply the provided register value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_frame_base","","Resume the `Evaluation` with the provided `frame_base`.  This will apply the provided frame base value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_tls","","Resume the `Evaluation` with the provided `value`.  This will apply the provided TLS value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_call_frame_cfa","","Resume the `Evaluation` with the provided `cfa`.  This will apply the provided CFA value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_at_location","","Resume the `Evaluation` with the provided `bytes`.  This will continue processing the evaluation with the new expression provided until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"resume_with_entry_value","","Resume the `Evaluation` with the provided `entry_value`.  This will apply the provided entry value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_parameter_ref","","Resume the `Evaluation` with the provided `parameter_value`.  This will apply the provided parameter value to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"resume_with_text_base","","Resume the `Evaluation` with the provided `text_base`.  This will apply the provided base address to the evaluation and continue evaluating opcodes until the evaluation is completed, reaches an error, or needs more information again.",99,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pubnamesentry"}}],[11,"name","","Returns the name this entry refers to.",100,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"unit_header_offset","","Returns the offset into the .debug_info section for the header of the compilation unit which contains this name.",100,{"inputs":[{"name":"self"}],"output":{"name":"debuginfooffset"}}],[11,"die_offset","","Returns the offset into the compilation unit for the debugging information entry which has this name.",100,{"inputs":[{"name":"self"}],"output":{"name":"unitoffset"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"debugpubnames"}}],[11,"new","","Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames` section.",101,null],[11,"items","","Iterate the pubnames in the `.debug_pubnames` section.",101,{"inputs":[{"name":"self"}],"output":{"name":"pubnamesentryiter"}}],[11,"section_name","","",101,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",101,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pubnamesentryiter"}}],[11,"next","","Advance the iterator and return the next pubname.",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pubtypesentry"}}],[11,"name","","Returns the name of the type this entry refers to.",103,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"unit_header_offset","","Returns the offset into the .debug_info section for the header of the compilation unit which contains the type with this name.",103,{"inputs":[{"name":"self"}],"output":{"name":"debuginfooffset"}}],[11,"die_offset","","Returns the offset into the compilation unit for the debugging information entry which the type with this name.",103,{"inputs":[{"name":"self"}],"output":{"name":"unitoffset"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"debugpubtypes"}}],[11,"new","","Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes` section.",104,null],[11,"items","","Iterate the pubtypes in the `.debug_pubtypes` section.",104,{"inputs":[{"name":"self"}],"output":{"name":"pubtypesentryiter"}}],[11,"section_name","","",104,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",104,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pubtypesentryiter"}}],[11,"next","","Advance the iterator and return the next pubtype.",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"debugrangesoffset"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"debugrangesoffset"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"debugrangesoffset"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"debugranges"}}],[11,"new","","Construct a new `DebugRanges` instance from the data in the `.debug_ranges` section.",106,null],[11,"ranges","","Iterate over the `Range` list entries starting at the given offset.",106,{"inputs":[{"name":"self"},{"name":"debugrangesoffset"},{"name":"u8"},{"name":"u64"}],"output":{"name":"result"}}],[11,"raw_ranges","","Iterate over the raw `Range` list entries starting at the given offset.",106,{"inputs":[{"name":"self"},{"name":"debugrangesoffset"},{"name":"u8"}],"output":{"name":"result"}}],[11,"section_name","","",106,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",106,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next range.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next range.",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"is_end","","Check if this is a range end entry.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_base_address","","Check if this is a base address selection entry.",41,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"add_base_address","","Add a base address to this range.",41,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u8"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"debugstroffset"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"debugstroffset"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"debugstroffset"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"debugstr"}}],[11,"new","","Construct a new `DebugStr` instance from the data in the `.debug_str` section.",109,null],[11,"get_str","","Lookup a string from the `.debug_str` section by DebugStrOffset.",109,{"inputs":[{"name":"self"},{"name":"debugstroffset"}],"output":{"name":"result"}}],[11,"section_name","","",109,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",109,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"debugtypesoffset"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"debugtypesoffset"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"debugtypesoffset"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"to_unit_offset","","Convert an offset to be relative to the start of the given unit, instead of relative to the start of the .debug_types section. Returns `None` if the offset is not within the unit entries.",46,{"inputs":[{"name":"self"},{"name":"typeunitheader"}],"output":{"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"debugtypesignature"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"debugtypesignature"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"debugtypesignature"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"debuginfooffset"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"debuginfooffset"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"debuginfooffset"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"to_unit_offset","","Convert an offset to be relative to the start of the given unit, instead of relative to the start of the .debug_info section. Returns `None` if the offset is not within this unit entries.",43,{"inputs":[{"name":"self"},{"name":"compilationunitheader"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"unitoffset"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"self"},{"name":"unitoffset"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"to_debug_info_offset","","Convert an offset to be relative to the start of the .debug_info section, instead of relative to the start of the given compilation unit.",44,{"inputs":[{"name":"self"},{"name":"compilationunitheader"}],"output":{"name":"debuginfooffset"}}],[11,"to_debug_types_offset","","Convert an offset to be relative to the start of the .debug_types section, instead of relative to the start of the given type unit.",44,{"inputs":[{"name":"self"},{"name":"typeunitheader"}],"output":{"name":"debugtypesoffset"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"debuginfo"}}],[11,"new","","Construct a new `DebugInfo` instance from the data in the `.debug_info` section.",110,null],[11,"units","","Iterate the compilation- and partial-units in this `.debug_info` section.",110,{"inputs":[{"name":"self"}],"output":{"name":"compilationunitheadersiter"}}],[11,"header_from_offset","","Get the CompilationUnitHeader located at offset from this .debug_info section.",110,{"inputs":[{"name":"self"},{"name":"debuginfooffset"}],"output":{"name":"result"}}],[11,"section_name","","",110,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",110,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"compilationunitheadersiter"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next unit header.",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",111,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"compilationunitheader"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"compilationunitheader"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"compilationunitheader"}],"output":{"name":"bool"}}],[11,"size_of_header","","Return the serialized size of the compilation unit header for the given DWARF format.",112,{"inputs":[{"name":"format"}],"output":{"name":"usize"}}],[11,"offset","","Get the offset of this compilation unit within the .debug_info section.",112,{"inputs":[{"name":"self"}],"output":{"name":"debuginfooffset"}}],[11,"unit_length","","Get the length of the debugging info for this compilation unit, not including the byte length of the encoded length itself.",112,null],[11,"length_including_self","","Get the length of the debugging info for this compilation unit, including the byte length of the encoded length itself.",112,null],[11,"version","","Get the DWARF version of the debugging info for this compilation unit.",112,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"debug_abbrev_offset","","The offset into the `.debug_abbrev` section for this compilation unit's debugging information entries' abbreviations.",112,{"inputs":[{"name":"self"}],"output":{"name":"debugabbrevoffset"}}],[11,"address_size","","The size of addresses (in bytes) in this type-unit.",112,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"format","","Whether this type unit is encoded in 64- or 32-bit DWARF.",112,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"header_size","","The serialized size of the header for this compilation unit.",112,null],[11,"entries","","Navigate this compilation unit's `DebuggingInformationEntry`s.",112,{"inputs":[{"name":"self"},{"name":"abbreviations"}],"output":{"name":"entriescursor"}}],[11,"entries_at_offset","","Navigate this compilation unit's `DebuggingInformationEntry`s starting at the given offset.",112,{"inputs":[{"name":"self"},{"name":"abbreviations"},{"name":"unitoffset"}],"output":{"name":"result"}}],[11,"entries_tree","","Navigate this compilation unit's `DebuggingInformationEntry`s as a tree starting at the given offset.",112,{"inputs":[{"name":"self"},{"name":"abbreviations"},{"name":"option"}],"output":{"name":"result"}}],[11,"abbreviations","","Parse this compilation unit's abbreviations.",112,{"inputs":[{"name":"self"},{"name":"debugabbrev"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"debugginginformationentry"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"code","","Get this entry's code.",113,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"offset","","Get this entry's offset.",113,{"inputs":[{"name":"self"}],"output":{"name":"unitoffset"}}],[11,"tag","","Get this entry's `DW_TAG_whatever` tag.",113,{"inputs":[{"name":"self"}],"output":{"name":"dwtag"}}],[11,"has_children","","Return true if this entry's type can have children, false otherwise.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","","Iterate over this entry's set of attributes.",113,{"inputs":[{"name":"self"}],"output":{"name":"attrsiter"}}],[11,"attr","","Find the first attribute in this entry which has the given name, and return it. Returns `Ok(None)` if no attribute is found.",113,{"inputs":[{"name":"self"},{"name":"dwat"}],"output":{"name":"result"}}],[11,"attr_value_raw","","Find the first attribute in this entry which has the given name, and return its raw value. Returns `Ok(None)` if no attribute is found.",113,{"inputs":[{"name":"self"},{"name":"dwat"}],"output":{"name":"result"}}],[11,"attr_value","","Find the first attribute in this entry which has the given name, and return its normalized value.  Returns `Ok(None)` if no attribute is found.",113,{"inputs":[{"name":"self"},{"name":"dwat"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"attributevalue"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"attributevalue"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"attributevalue"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"name","","Get this attribute's name.",114,{"inputs":[{"name":"self"}],"output":{"name":"dwat"}}],[11,"raw_value","","Get this attribute's raw value.",114,{"inputs":[{"name":"self"}],"output":{"name":"attributevalue"}}],[11,"value","","Get this attribute's normalized value.",114,{"inputs":[{"name":"self"}],"output":{"name":"attributevalue"}}],[11,"u8_value","","Try to convert this attribute's value to a u8.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"u16_value","","Try to convert this attribute's value to a u16.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"udata_value","","Try to convert this attribute's value to an unsigned integer.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sdata_value","","Try to convert this attribute's value to a signed integer.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset_value","","Try to convert this attribute's value to an offset.",114,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"string_value","","Try to return this attribute's value as a string slice.",114,{"inputs":[{"name":"self"},{"name":"debugstr"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"attrsiter"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator and return the next attribute.",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"entriescursor"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Get a reference to the entry that the cursor is currently pointing to.",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_entry","","Move the cursor to the next DIE in the tree.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_dfs","","Move the cursor to the next DIE in the tree in DFS order.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_sibling","","Move the cursor to the next sibling DIE of the current one.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"entriestree"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"root","","Returns the root node of the tree.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","","Returns the current entry in the tree.",118,{"inputs":[{"name":"self"}],"output":{"name":"debugginginformationentry"}}],[11,"children","","Create an iterator for the children of the current entry.",118,{"inputs":[{"name":"self"}],"output":{"name":"entriestreeiter"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Returns an `EntriesTreeNode` for the next child entry.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"debugtypes"}}],[11,"new","","Construct a new `DebugTypes` instance from the data in the `.debug_types` section.",120,null],[11,"section_name","","",120,{"inputs":[],"output":{"name":"str"}}],[11,"from","","",120,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"units","","Iterate the type-units in this `.debug_types` section.",120,{"inputs":[{"name":"self"}],"output":{"name":"typeunitheadersiter"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"typeunitheadersiter"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Advance the iterator to the next type unit header.",121,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",121,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"typeunitheader"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"typeunitheader"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"typeunitheader"}],"output":{"name":"bool"}}],[11,"size_of_header","","Return the serialized size of the type-unit header for the given DWARF format.",122,{"inputs":[{"name":"format"}],"output":{"name":"usize"}}],[11,"offset","","Get the offset of this compilation unit within the .debug_info section.",122,{"inputs":[{"name":"self"}],"output":{"name":"debugtypesoffset"}}],[11,"unit_length","","Get the length of the debugging info for this type-unit.",122,null],[11,"length_including_self","","Get the length of the debugging info for this type-unit, including the byte length of the encoded length itself.",122,null],[11,"version","","Get the DWARF version of the debugging info for this type-unit.",122,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"debug_abbrev_offset","","The offset into the `.debug_abbrev` section for this type-unit's debugging information entries.",122,{"inputs":[{"name":"self"}],"output":{"name":"debugabbrevoffset"}}],[11,"address_size","","The size of addresses (in bytes) in this type-unit.",122,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"format","","Whether this type unit is encoded in 64- or 32-bit DWARF.",122,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"header_size","","The serialized size of the header for this type-unit.",122,null],[11,"type_signature","","Get the unique type signature for this type unit.",122,{"inputs":[{"name":"self"}],"output":{"name":"debugtypesignature"}}],[11,"type_offset","","Get the offset within this type unit where the type is defined.",122,{"inputs":[{"name":"self"}],"output":{"name":"unitoffset"}}],[11,"entries","","Navigate this type unit's `DebuggingInformationEntry`s.",122,{"inputs":[{"name":"self"},{"name":"abbreviations"}],"output":{"name":"entriescursor"}}],[11,"entries_at_offset","","Navigate this type unit's `DebuggingInformationEntry`s starting at the given offset.",122,{"inputs":[{"name":"self"},{"name":"abbreviations"},{"name":"unitoffset"}],"output":{"name":"result"}}],[11,"entries_tree","","Navigate this type unit's `DebuggingInformationEntry`s as a tree starting at the given offset.",122,{"inputs":[{"name":"self"},{"name":"abbreviations"},{"name":"option"}],"output":{"name":"result"}}],[11,"abbreviations","","Parse this type unit's abbreviations.",122,{"inputs":[{"name":"self"},{"name":"debugabbrev"}],"output":{"name":"result"}}],[6,"UnwindResult","","Either a value of `Ok(T)`, or a pair of an error and uninitialized unwind context of `Err((gimli::Error, UnwindContext))`.",null,null],[6,"NativeEndian","","The native endianity for the target platform.",null,null],[6,"Result","","The result of a parse.",null,null],[17,"DW_UT_compile","","",null,null],[17,"DW_UT_type","","",null,null],[17,"DW_UT_partial","","",null,null],[17,"DW_UT_skeleton","","",null,null],[17,"DW_UT_split_compile","","",null,null],[17,"DW_UT_split_type","","",null,null],[17,"DW_UT_lo_user","","",null,null],[17,"DW_UT_hi_user","","",null,null],[17,"DW_CFA_advance_loc","","",null,null],[17,"DW_CFA_offset","","",null,null],[17,"DW_CFA_restore","","",null,null],[17,"DW_CFA_nop","","",null,null],[17,"DW_CFA_set_loc","","",null,null],[17,"DW_CFA_advance_loc1","","",null,null],[17,"DW_CFA_advance_loc2","","",null,null],[17,"DW_CFA_advance_loc4","","",null,null],[17,"DW_CFA_offset_extended","","",null,null],[17,"DW_CFA_restore_extended","","",null,null],[17,"DW_CFA_undefined","","",null,null],[17,"DW_CFA_same_value","","",null,null],[17,"DW_CFA_register","","",null,null],[17,"DW_CFA_remember_state","","",null,null],[17,"DW_CFA_restore_state","","",null,null],[17,"DW_CFA_def_cfa","","",null,null],[17,"DW_CFA_def_cfa_register","","",null,null],[17,"DW_CFA_def_cfa_offset","","",null,null],[17,"DW_CFA_def_cfa_expression","","",null,null],[17,"DW_CFA_expression","","",null,null],[17,"DW_CFA_offset_extended_sf","","",null,null],[17,"DW_CFA_def_cfa_sf","","",null,null],[17,"DW_CFA_def_cfa_offset_sf","","",null,null],[17,"DW_CFA_val_offset","","",null,null],[17,"DW_CFA_val_offset_sf","","",null,null],[17,"DW_CFA_val_expression","","",null,null],[17,"DW_CFA_lo_user","","",null,null],[17,"DW_CFA_hi_user","","",null,null],[17,"DW_CFA_MIPS_advance_loc8","","",null,null],[17,"DW_CFA_GNU_window_save","","",null,null],[17,"DW_CFA_GNU_args_size","","",null,null],[17,"DW_CFA_GNU_negative_offset_extended","","",null,null],[17,"DW_CHILDREN_no","","",null,null],[17,"DW_CHILDREN_yes","","",null,null],[17,"DW_TAG_null","","",null,null],[17,"DW_TAG_array_type","","",null,null],[17,"DW_TAG_class_type","","",null,null],[17,"DW_TAG_entry_point","","",null,null],[17,"DW_TAG_enumeration_type","","",null,null],[17,"DW_TAG_formal_parameter","","",null,null],[17,"DW_TAG_imported_declaration","","",null,null],[17,"DW_TAG_label","","",null,null],[17,"DW_TAG_lexical_block","","",null,null],[17,"DW_TAG_member","","",null,null],[17,"DW_TAG_pointer_type","","",null,null],[17,"DW_TAG_reference_type","","",null,null],[17,"DW_TAG_compile_unit","","",null,null],[17,"DW_TAG_string_type","","",null,null],[17,"DW_TAG_structure_type","","",null,null],[17,"DW_TAG_subroutine_type","","",null,null],[17,"DW_TAG_typedef","","",null,null],[17,"DW_TAG_union_type","","",null,null],[17,"DW_TAG_unspecified_parameters","","",null,null],[17,"DW_TAG_variant","","",null,null],[17,"DW_TAG_common_block","","",null,null],[17,"DW_TAG_common_inclusion","","",null,null],[17,"DW_TAG_inheritance","","",null,null],[17,"DW_TAG_inlined_subroutine","","",null,null],[17,"DW_TAG_module","","",null,null],[17,"DW_TAG_ptr_to_member_type","","",null,null],[17,"DW_TAG_set_type","","",null,null],[17,"DW_TAG_subrange_type","","",null,null],[17,"DW_TAG_with_stmt","","",null,null],[17,"DW_TAG_access_declaration","","",null,null],[17,"DW_TAG_base_type","","",null,null],[17,"DW_TAG_catch_block","","",null,null],[17,"DW_TAG_const_type","","",null,null],[17,"DW_TAG_constant","","",null,null],[17,"DW_TAG_enumerator","","",null,null],[17,"DW_TAG_file_type","","",null,null],[17,"DW_TAG_friend","","",null,null],[17,"DW_TAG_namelist","","",null,null],[17,"DW_TAG_namelist_item","","",null,null],[17,"DW_TAG_packed_type","","",null,null],[17,"DW_TAG_subprogram","","",null,null],[17,"DW_TAG_template_type_parameter","","",null,null],[17,"DW_TAG_template_value_parameter","","",null,null],[17,"DW_TAG_thrown_type","","",null,null],[17,"DW_TAG_try_block","","",null,null],[17,"DW_TAG_variant_part","","",null,null],[17,"DW_TAG_variable","","",null,null],[17,"DW_TAG_volatile_type","","",null,null],[17,"DW_TAG_dwarf_procedure","","",null,null],[17,"DW_TAG_restrict_type","","",null,null],[17,"DW_TAG_interface_type","","",null,null],[17,"DW_TAG_namespace","","",null,null],[17,"DW_TAG_imported_module","","",null,null],[17,"DW_TAG_unspecified_type","","",null,null],[17,"DW_TAG_partial_unit","","",null,null],[17,"DW_TAG_imported_unit","","",null,null],[17,"DW_TAG_condition","","",null,null],[17,"DW_TAG_shared_type","","",null,null],[17,"DW_TAG_type_unit","","",null,null],[17,"DW_TAG_rvalue_reference_type","","",null,null],[17,"DW_TAG_template_alias","","",null,null],[17,"DW_TAG_coarray_type","","",null,null],[17,"DW_TAG_generic_subrange","","",null,null],[17,"DW_TAG_dynamic_type","","",null,null],[17,"DW_TAG_atomic_type","","",null,null],[17,"DW_TAG_call_site","","",null,null],[17,"DW_TAG_call_site_parameter","","",null,null],[17,"DW_TAG_skeleton_unit","","",null,null],[17,"DW_TAG_immutable_type","","",null,null],[17,"DW_TAG_lo_user","","",null,null],[17,"DW_TAG_hi_user","","",null,null],[17,"DW_TAG_MIPS_loop","","",null,null],[17,"DW_TAG_HP_array_descriptor","","",null,null],[17,"DW_TAG_HP_Bliss_field","","",null,null],[17,"DW_TAG_HP_Bliss_field_set","","",null,null],[17,"DW_TAG_format_label","","",null,null],[17,"DW_TAG_function_template","","",null,null],[17,"DW_TAG_class_template","","",null,null],[17,"DW_TAG_GNU_BINCL","","",null,null],[17,"DW_TAG_GNU_EINCL","","",null,null],[17,"DW_TAG_GNU_template_template_param","","",null,null],[17,"DW_TAG_GNU_template_parameter_pack","","",null,null],[17,"DW_TAG_GNU_formal_parameter_pack","","",null,null],[17,"DW_TAG_GNU_call_site","","",null,null],[17,"DW_TAG_GNU_call_site_parameter","","",null,null],[17,"DW_TAG_APPLE_property","","",null,null],[17,"DW_TAG_SUN_function_template","","",null,null],[17,"DW_TAG_SUN_class_template","","",null,null],[17,"DW_TAG_SUN_struct_template","","",null,null],[17,"DW_TAG_SUN_union_template","","",null,null],[17,"DW_TAG_SUN_indirect_inheritance","","",null,null],[17,"DW_TAG_SUN_codeflags","","",null,null],[17,"DW_TAG_SUN_memop_info","","",null,null],[17,"DW_TAG_SUN_omp_child_func","","",null,null],[17,"DW_TAG_SUN_rtti_descriptor","","",null,null],[17,"DW_TAG_SUN_dtor_info","","",null,null],[17,"DW_TAG_SUN_dtor","","",null,null],[17,"DW_TAG_SUN_f90_interface","","",null,null],[17,"DW_TAG_SUN_fortran_vax_structure","","",null,null],[17,"DW_TAG_ALTIUM_circ_type","","",null,null],[17,"DW_TAG_ALTIUM_mwa_circ_type","","",null,null],[17,"DW_TAG_ALTIUM_rev_carry_type","","",null,null],[17,"DW_TAG_ALTIUM_rom","","",null,null],[17,"DW_TAG_upc_shared_type","","",null,null],[17,"DW_TAG_upc_strict_type","","",null,null],[17,"DW_TAG_upc_relaxed_type","","",null,null],[17,"DW_TAG_PGI_kanji_type","","",null,null],[17,"DW_TAG_PGI_interface_block","","",null,null],[17,"DW_TAG_BORLAND_property","","",null,null],[17,"DW_TAG_BORLAND_Delphi_string","","",null,null],[17,"DW_TAG_BORLAND_Delphi_dynamic_array","","",null,null],[17,"DW_TAG_BORLAND_Delphi_set","","",null,null],[17,"DW_TAG_BORLAND_Delphi_variant","","",null,null],[17,"DW_AT_null","","",null,null],[17,"DW_AT_sibling","","",null,null],[17,"DW_AT_location","","",null,null],[17,"DW_AT_name","","",null,null],[17,"DW_AT_ordering","","",null,null],[17,"DW_AT_byte_size","","",null,null],[17,"DW_AT_bit_offset","","",null,null],[17,"DW_AT_bit_size","","",null,null],[17,"DW_AT_stmt_list","","",null,null],[17,"DW_AT_low_pc","","",null,null],[17,"DW_AT_high_pc","","",null,null],[17,"DW_AT_language","","",null,null],[17,"DW_AT_discr","","",null,null],[17,"DW_AT_discr_value","","",null,null],[17,"DW_AT_visibility","","",null,null],[17,"DW_AT_import","","",null,null],[17,"DW_AT_string_length","","",null,null],[17,"DW_AT_common_reference","","",null,null],[17,"DW_AT_comp_dir","","",null,null],[17,"DW_AT_const_value","","",null,null],[17,"DW_AT_containing_type","","",null,null],[17,"DW_AT_default_value","","",null,null],[17,"DW_AT_inline","","",null,null],[17,"DW_AT_is_optional","","",null,null],[17,"DW_AT_lower_bound","","",null,null],[17,"DW_AT_producer","","",null,null],[17,"DW_AT_prototyped","","",null,null],[17,"DW_AT_return_addr","","",null,null],[17,"DW_AT_start_scope","","",null,null],[17,"DW_AT_bit_stride","","",null,null],[17,"DW_AT_upper_bound","","",null,null],[17,"DW_AT_abstract_origin","","",null,null],[17,"DW_AT_accessibility","","",null,null],[17,"DW_AT_address_class","","",null,null],[17,"DW_AT_artificial","","",null,null],[17,"DW_AT_base_types","","",null,null],[17,"DW_AT_calling_convention","","",null,null],[17,"DW_AT_count","","",null,null],[17,"DW_AT_data_member_location","","",null,null],[17,"DW_AT_decl_column","","",null,null],[17,"DW_AT_decl_file","","",null,null],[17,"DW_AT_decl_line","","",null,null],[17,"DW_AT_declaration","","",null,null],[17,"DW_AT_discr_list","","",null,null],[17,"DW_AT_encoding","","",null,null],[17,"DW_AT_external","","",null,null],[17,"DW_AT_frame_base","","",null,null],[17,"DW_AT_friend","","",null,null],[17,"DW_AT_identifier_case","","",null,null],[17,"DW_AT_macro_info","","",null,null],[17,"DW_AT_namelist_item","","",null,null],[17,"DW_AT_priority","","",null,null],[17,"DW_AT_segment","","",null,null],[17,"DW_AT_specification","","",null,null],[17,"DW_AT_static_link","","",null,null],[17,"DW_AT_type","","",null,null],[17,"DW_AT_use_location","","",null,null],[17,"DW_AT_variable_parameter","","",null,null],[17,"DW_AT_virtuality","","",null,null],[17,"DW_AT_vtable_elem_location","","",null,null],[17,"DW_AT_allocated","","",null,null],[17,"DW_AT_associated","","",null,null],[17,"DW_AT_data_location","","",null,null],[17,"DW_AT_byte_stride","","",null,null],[17,"DW_AT_entry_pc","","",null,null],[17,"DW_AT_use_UTF8","","",null,null],[17,"DW_AT_extension","","",null,null],[17,"DW_AT_ranges","","",null,null],[17,"DW_AT_trampoline","","",null,null],[17,"DW_AT_call_column","","",null,null],[17,"DW_AT_call_file","","",null,null],[17,"DW_AT_call_line","","",null,null],[17,"DW_AT_description","","",null,null],[17,"DW_AT_binary_scale","","",null,null],[17,"DW_AT_decimal_scale","","",null,null],[17,"DW_AT_small","","",null,null],[17,"DW_AT_decimal_sign","","",null,null],[17,"DW_AT_digit_count","","",null,null],[17,"DW_AT_picture_string","","",null,null],[17,"DW_AT_mutable","","",null,null],[17,"DW_AT_threads_scaled","","",null,null],[17,"DW_AT_explicit","","",null,null],[17,"DW_AT_object_pointer","","",null,null],[17,"DW_AT_endianity","","",null,null],[17,"DW_AT_elemental","","",null,null],[17,"DW_AT_pure","","",null,null],[17,"DW_AT_recursive","","",null,null],[17,"DW_AT_signature","","",null,null],[17,"DW_AT_main_subprogram","","",null,null],[17,"DW_AT_data_bit_offset","","",null,null],[17,"DW_AT_const_expr","","",null,null],[17,"DW_AT_enum_class","","",null,null],[17,"DW_AT_linkage_name","","",null,null],[17,"DW_AT_string_length_bit_size","","",null,null],[17,"DW_AT_string_length_byte_size","","",null,null],[17,"DW_AT_rank","","",null,null],[17,"DW_AT_str_offsets_base","","",null,null],[17,"DW_AT_addr_base","","",null,null],[17,"DW_AT_ranges_base","","",null,null],[17,"DW_AT_dwo_name","","",null,null],[17,"DW_AT_reference","","",null,null],[17,"DW_AT_rvalue_reference","","",null,null],[17,"DW_AT_macros","","",null,null],[17,"DW_AT_call_all_calls","","",null,null],[17,"DW_AT_call_all_source_calls","","",null,null],[17,"DW_AT_call_all_tail_calls","","",null,null],[17,"DW_AT_call_return_pc","","",null,null],[17,"DW_AT_call_value","","",null,null],[17,"DW_AT_call_origin","","",null,null],[17,"DW_AT_call_parameter","","",null,null],[17,"DW_AT_call_pc","","",null,null],[17,"DW_AT_call_tail_call","","",null,null],[17,"DW_AT_call_target","","",null,null],[17,"DW_AT_call_target_clobbered","","",null,null],[17,"DW_AT_call_data_location","","",null,null],[17,"DW_AT_call_data_value","","",null,null],[17,"DW_AT_noreturn","","",null,null],[17,"DW_AT_alignment","","",null,null],[17,"DW_AT_export_symbols","","",null,null],[17,"DW_AT_deleted","","",null,null],[17,"DW_AT_defaulted","","",null,null],[17,"DW_AT_loclists_base","","",null,null],[17,"DW_AT_lo_user","","",null,null],[17,"DW_AT_hi_user","","",null,null],[17,"DW_AT_MIPS_fde","","",null,null],[17,"DW_AT_MIPS_loop_begin","","",null,null],[17,"DW_AT_MIPS_tail_loop_begin","","",null,null],[17,"DW_AT_MIPS_epilog_begin","","",null,null],[17,"DW_AT_MIPS_loop_unroll_factor","","",null,null],[17,"DW_AT_MIPS_software_pipeline_depth","","",null,null],[17,"DW_AT_MIPS_linkage_name","","",null,null],[17,"DW_AT_MIPS_stride","","",null,null],[17,"DW_AT_MIPS_abstract_name","","",null,null],[17,"DW_AT_MIPS_clone_origin","","",null,null],[17,"DW_AT_MIPS_has_inlines","","",null,null],[17,"DW_AT_MIPS_stride_byte","","",null,null],[17,"DW_AT_MIPS_stride_elem","","",null,null],[17,"DW_AT_MIPS_ptr_dopetype","","",null,null],[17,"DW_AT_MIPS_allocatable_dopetype","","",null,null],[17,"DW_AT_MIPS_assumed_shape_dopetype","","",null,null],[17,"DW_AT_MIPS_assumed_size","","",null,null],[17,"DW_AT_INTEL_other_endian","","",null,null],[17,"DW_AT_sf_names","","",null,null],[17,"DW_AT_src_info","","",null,null],[17,"DW_AT_mac_info","","",null,null],[17,"DW_AT_src_coords","","",null,null],[17,"DW_AT_body_begin","","",null,null],[17,"DW_AT_body_end","","",null,null],[17,"DW_AT_GNU_vector","","",null,null],[17,"DW_AT_GNU_guarded_by","","",null,null],[17,"DW_AT_GNU_pt_guarded_by","","",null,null],[17,"DW_AT_GNU_guarded","","",null,null],[17,"DW_AT_GNU_pt_guarded","","",null,null],[17,"DW_AT_GNU_locks_excluded","","",null,null],[17,"DW_AT_GNU_exclusive_locks_required","","",null,null],[17,"DW_AT_GNU_shared_locks_required","","",null,null],[17,"DW_AT_GNU_odr_signature","","",null,null],[17,"DW_AT_GNU_template_name","","",null,null],[17,"DW_AT_GNU_call_site_value","","",null,null],[17,"DW_AT_GNU_call_site_data_value","","",null,null],[17,"DW_AT_GNU_call_site_target","","",null,null],[17,"DW_AT_GNU_call_site_target_clobbered","","",null,null],[17,"DW_AT_GNU_tail_call","","",null,null],[17,"DW_AT_GNU_all_tail_call_sites","","",null,null],[17,"DW_AT_GNU_all_call_sites","","",null,null],[17,"DW_AT_GNU_all_source_call_sites","","",null,null],[17,"DW_AT_GNU_macros","","",null,null],[17,"DW_AT_GNU_dwo_name","","",null,null],[17,"DW_AT_GNU_dwo_id","","",null,null],[17,"DW_AT_GNU_ranges_base","","",null,null],[17,"DW_AT_GNU_addr_base","","",null,null],[17,"DW_AT_GNU_pubnames","","",null,null],[17,"DW_AT_GNU_pubtypes","","",null,null],[17,"DW_AT_GNU_discriminator","","",null,null],[17,"DW_AT_SUN_template","","",null,null],[17,"DW_AT_SUN_alignment","","",null,null],[17,"DW_AT_SUN_vtable","","",null,null],[17,"DW_AT_SUN_count_guarantee","","",null,null],[17,"DW_AT_SUN_command_line","","",null,null],[17,"DW_AT_SUN_vbase","","",null,null],[17,"DW_AT_SUN_compile_options","","",null,null],[17,"DW_AT_SUN_language","","",null,null],[17,"DW_AT_SUN_browser_file","","",null,null],[17,"DW_AT_SUN_vtable_abi","","",null,null],[17,"DW_AT_SUN_func_offsets","","",null,null],[17,"DW_AT_SUN_cf_kind","","",null,null],[17,"DW_AT_SUN_vtable_index","","",null,null],[17,"DW_AT_SUN_omp_tpriv_addr","","",null,null],[17,"DW_AT_SUN_omp_child_func","","",null,null],[17,"DW_AT_SUN_func_offset","","",null,null],[17,"DW_AT_SUN_memop_type_ref","","",null,null],[17,"DW_AT_SUN_profile_id","","",null,null],[17,"DW_AT_SUN_memop_signature","","",null,null],[17,"DW_AT_SUN_obj_dir","","",null,null],[17,"DW_AT_SUN_obj_file","","",null,null],[17,"DW_AT_SUN_original_name","","",null,null],[17,"DW_AT_SUN_hwcprof_signature","","",null,null],[17,"DW_AT_SUN_amd64_parmdump","","",null,null],[17,"DW_AT_SUN_part_link_name","","",null,null],[17,"DW_AT_SUN_link_name","","",null,null],[17,"DW_AT_SUN_pass_with_const","","",null,null],[17,"DW_AT_SUN_return_with_const","","",null,null],[17,"DW_AT_SUN_import_by_name","","",null,null],[17,"DW_AT_SUN_f90_pointer","","",null,null],[17,"DW_AT_SUN_pass_by_ref","","",null,null],[17,"DW_AT_SUN_f90_allocatable","","",null,null],[17,"DW_AT_SUN_f90_assumed_shape_array","","",null,null],[17,"DW_AT_SUN_c_vla","","",null,null],[17,"DW_AT_SUN_return_value_ptr","","",null,null],[17,"DW_AT_SUN_dtor_start","","",null,null],[17,"DW_AT_SUN_dtor_length","","",null,null],[17,"DW_AT_SUN_dtor_state_initial","","",null,null],[17,"DW_AT_SUN_dtor_state_final","","",null,null],[17,"DW_AT_SUN_dtor_state_deltas","","",null,null],[17,"DW_AT_SUN_import_by_lname","","",null,null],[17,"DW_AT_SUN_f90_use_only","","",null,null],[17,"DW_AT_SUN_namelist_spec","","",null,null],[17,"DW_AT_SUN_is_omp_child_func","","",null,null],[17,"DW_AT_SUN_fortran_main_alias","","",null,null],[17,"DW_AT_SUN_fortran_based","","",null,null],[17,"DW_AT_ALTIUM_loclist","","",null,null],[17,"DW_AT_use_GNAT_descriptive_type","","",null,null],[17,"DW_AT_GNAT_descriptive_type","","",null,null],[17,"DW_AT_GNU_numerator","","",null,null],[17,"DW_AT_GNU_denominator","","",null,null],[17,"DW_AT_GNU_bias","","",null,null],[17,"DW_AT_upc_threads_scaled","","",null,null],[17,"DW_AT_PGI_lbase","","",null,null],[17,"DW_AT_PGI_soffset","","",null,null],[17,"DW_AT_PGI_lstride","","",null,null],[17,"DW_AT_BORLAND_property_read","","",null,null],[17,"DW_AT_BORLAND_property_write","","",null,null],[17,"DW_AT_BORLAND_property_implements","","",null,null],[17,"DW_AT_BORLAND_property_index","","",null,null],[17,"DW_AT_BORLAND_property_default","","",null,null],[17,"DW_AT_BORLAND_Delphi_unit","","",null,null],[17,"DW_AT_BORLAND_Delphi_class","","",null,null],[17,"DW_AT_BORLAND_Delphi_record","","",null,null],[17,"DW_AT_BORLAND_Delphi_metaclass","","",null,null],[17,"DW_AT_BORLAND_Delphi_constructor","","",null,null],[17,"DW_AT_BORLAND_Delphi_destructor","","",null,null],[17,"DW_AT_BORLAND_Delphi_anonymous_method","","",null,null],[17,"DW_AT_BORLAND_Delphi_interface","","",null,null],[17,"DW_AT_BORLAND_Delphi_ABI","","",null,null],[17,"DW_AT_BORLAND_Delphi_return","","",null,null],[17,"DW_AT_BORLAND_Delphi_frameptr","","",null,null],[17,"DW_AT_BORLAND_closure","","",null,null],[17,"DW_AT_LLVM_include_path","","",null,null],[17,"DW_AT_LLVM_config_macros","","",null,null],[17,"DW_AT_LLVM_isysroot","","",null,null],[17,"DW_AT_APPLE_optimized","","",null,null],[17,"DW_AT_APPLE_flags","","",null,null],[17,"DW_AT_APPLE_isa","","",null,null],[17,"DW_AT_APPLE_block","","",null,null],[17,"DW_AT_APPLE_major_runtime_vers","","",null,null],[17,"DW_AT_APPLE_runtime_class","","",null,null],[17,"DW_AT_APPLE_omit_frame_ptr","","",null,null],[17,"DW_AT_APPLE_property_name","","",null,null],[17,"DW_AT_APPLE_property_getter","","",null,null],[17,"DW_AT_APPLE_property_setter","","",null,null],[17,"DW_AT_APPLE_property_attribute","","",null,null],[17,"DW_AT_APPLE_objc_complete_type","","",null,null],[17,"DW_AT_APPLE_property","","",null,null],[17,"DW_FORM_null","","",null,null],[17,"DW_FORM_addr","","",null,null],[17,"DW_FORM_block2","","",null,null],[17,"DW_FORM_block4","","",null,null],[17,"DW_FORM_data2","","",null,null],[17,"DW_FORM_data4","","",null,null],[17,"DW_FORM_data8","","",null,null],[17,"DW_FORM_string","","",null,null],[17,"DW_FORM_block","","",null,null],[17,"DW_FORM_block1","","",null,null],[17,"DW_FORM_data1","","",null,null],[17,"DW_FORM_flag","","",null,null],[17,"DW_FORM_sdata","","",null,null],[17,"DW_FORM_strp","","",null,null],[17,"DW_FORM_udata","","",null,null],[17,"DW_FORM_ref_addr","","",null,null],[17,"DW_FORM_ref1","","",null,null],[17,"DW_FORM_ref2","","",null,null],[17,"DW_FORM_ref4","","",null,null],[17,"DW_FORM_ref8","","",null,null],[17,"DW_FORM_ref_udata","","",null,null],[17,"DW_FORM_indirect","","",null,null],[17,"DW_FORM_sec_offset","","",null,null],[17,"DW_FORM_exprloc","","",null,null],[17,"DW_FORM_flag_present","","",null,null],[17,"DW_FORM_ref_sig8","","",null,null],[17,"DW_FORM_strx","","",null,null],[17,"DW_FORM_addrx","","",null,null],[17,"DW_FORM_ref_sup4","","",null,null],[17,"DW_FORM_strp_sup","","",null,null],[17,"DW_FORM_data16","","",null,null],[17,"DW_FORM_line_strp","","",null,null],[17,"DW_FORM_implicit_const","","",null,null],[17,"DW_FORM_loclistx","","",null,null],[17,"DW_FORM_rnglistx","","",null,null],[17,"DW_FORM_ref_sup8","","",null,null],[17,"DW_FORM_strx1","","",null,null],[17,"DW_FORM_strx2","","",null,null],[17,"DW_FORM_strx3","","",null,null],[17,"DW_FORM_strx4","","",null,null],[17,"DW_FORM_addrx1","","",null,null],[17,"DW_FORM_addrx2","","",null,null],[17,"DW_FORM_addrx3","","",null,null],[17,"DW_FORM_addrx4","","",null,null],[17,"DW_FORM_GNU_addr_index","","",null,null],[17,"DW_FORM_GNU_str_index","","",null,null],[17,"DW_FORM_GNU_ref_alt","","",null,null],[17,"DW_FORM_GNU_strp_alt","","",null,null],[17,"DW_ATE_address","","",null,null],[17,"DW_ATE_boolean","","",null,null],[17,"DW_ATE_complex_float","","",null,null],[17,"DW_ATE_float","","",null,null],[17,"DW_ATE_signed","","",null,null],[17,"DW_ATE_signed_char","","",null,null],[17,"DW_ATE_unsigned","","",null,null],[17,"DW_ATE_unsigned_char","","",null,null],[17,"DW_ATE_imaginary_float","","",null,null],[17,"DW_ATE_packed_decimal","","",null,null],[17,"DW_ATE_numeric_string","","",null,null],[17,"DW_ATE_edited","","",null,null],[17,"DW_ATE_signed_fixed","","",null,null],[17,"DW_ATE_unsigned_fixed","","",null,null],[17,"DW_ATE_decimal_float","","",null,null],[17,"DW_ATE_UTF","","",null,null],[17,"DW_ATE_UCS","","",null,null],[17,"DW_ATE_ASCII","","",null,null],[17,"DW_ATE_lo_user","","",null,null],[17,"DW_ATE_hi_user","","",null,null],[17,"DW_LLE_end_of_list","","",null,null],[17,"DW_LLE_base_addressx","","",null,null],[17,"DW_LLE_startx_endx","","",null,null],[17,"DW_LLE_startx_length","","",null,null],[17,"DW_LLE_offset_pair","","",null,null],[17,"DW_LLE_default_location","","",null,null],[17,"DW_LLE_base_address","","",null,null],[17,"DW_LLE_start_end","","",null,null],[17,"DW_LLE_start_length","","",null,null],[17,"DW_DS_unsigned","","",null,null],[17,"DW_DS_leading_overpunch","","",null,null],[17,"DW_DS_trailing_overpunch","","",null,null],[17,"DW_DS_leading_separate","","",null,null],[17,"DW_DS_trailing_separate","","",null,null],[17,"DW_END_default","","",null,null],[17,"DW_END_big","","",null,null],[17,"DW_END_little","","",null,null],[17,"DW_END_lo_user","","",null,null],[17,"DW_END_hi_user","","",null,null],[17,"DW_ACCESS_public","","",null,null],[17,"DW_ACCESS_protected","","",null,null],[17,"DW_ACCESS_private","","",null,null],[17,"DW_VIS_local","","",null,null],[17,"DW_VIS_exported","","",null,null],[17,"DW_VIS_qualified","","",null,null],[17,"DW_VIRTUALITY_none","","",null,null],[17,"DW_VIRTUALITY_virtual","","",null,null],[17,"DW_VIRTUALITY_pure_virtual","","",null,null],[17,"DW_LANG_C89","","",null,null],[17,"DW_LANG_C","","",null,null],[17,"DW_LANG_Ada83","","",null,null],[17,"DW_LANG_C_plus_plus","","",null,null],[17,"DW_LANG_Cobol74","","",null,null],[17,"DW_LANG_Cobol85","","",null,null],[17,"DW_LANG_Fortran77","","",null,null],[17,"DW_LANG_Fortran90","","",null,null],[17,"DW_LANG_Pascal83","","",null,null],[17,"DW_LANG_Modula2","","",null,null],[17,"DW_LANG_Java","","",null,null],[17,"DW_LANG_C99","","",null,null],[17,"DW_LANG_Ada95","","",null,null],[17,"DW_LANG_Fortran95","","",null,null],[17,"DW_LANG_PLI","","",null,null],[17,"DW_LANG_ObjC","","",null,null],[17,"DW_LANG_ObjC_plus_plus","","",null,null],[17,"DW_LANG_UPC","","",null,null],[17,"DW_LANG_D","","",null,null],[17,"DW_LANG_Python","","",null,null],[17,"DW_LANG_OpenCL","","",null,null],[17,"DW_LANG_Go","","",null,null],[17,"DW_LANG_Modula3","","",null,null],[17,"DW_LANG_Haskell","","",null,null],[17,"DW_LANG_C_plus_plus_03","","",null,null],[17,"DW_LANG_C_plus_plus_11","","",null,null],[17,"DW_LANG_OCaml","","",null,null],[17,"DW_LANG_Rust","","",null,null],[17,"DW_LANG_C11","","",null,null],[17,"DW_LANG_Swift","","",null,null],[17,"DW_LANG_Julia","","",null,null],[17,"DW_LANG_Dylan","","",null,null],[17,"DW_LANG_C_plus_plus_14","","",null,null],[17,"DW_LANG_Fortran03","","",null,null],[17,"DW_LANG_Fortran08","","",null,null],[17,"DW_LANG_RenderScript","","",null,null],[17,"DW_LANG_BLISS","","",null,null],[17,"DW_LANG_lo_user","","",null,null],[17,"DW_LANG_hi_user","","",null,null],[17,"DW_LANG_Mips_Assembler","","",null,null],[17,"DW_LANG_GOOGLE_RenderScript","","",null,null],[17,"DW_LANG_SUN_Assembler","","",null,null],[17,"DW_LANG_ALTIUM_Assembler","","",null,null],[17,"DW_LANG_BORLAND_Delphi","","",null,null],[17,"DW_ADDR_none","","",null,null],[17,"DW_ID_case_sensitive","","",null,null],[17,"DW_ID_up_case","","",null,null],[17,"DW_ID_down_case","","",null,null],[17,"DW_ID_case_insensitive","","",null,null],[17,"DW_CC_normal","","",null,null],[17,"DW_CC_program","","",null,null],[17,"DW_CC_nocall","","",null,null],[17,"DW_CC_pass_by_reference","","",null,null],[17,"DW_CC_pass_by_value","","",null,null],[17,"DW_CC_lo_user","","",null,null],[17,"DW_CC_hi_user","","",null,null],[17,"DW_INL_not_inlined","","",null,null],[17,"DW_INL_inlined","","",null,null],[17,"DW_INL_declared_not_inlined","","",null,null],[17,"DW_INL_declared_inlined","","",null,null],[17,"DW_ORD_row_major","","",null,null],[17,"DW_ORD_col_major","","",null,null],[17,"DW_DSC_label","","",null,null],[17,"DW_DSC_range","","",null,null],[17,"DW_IDX_compile_unit","","",null,null],[17,"DW_IDX_type_unit","","",null,null],[17,"DW_IDX_die_offset","","",null,null],[17,"DW_IDX_parent","","",null,null],[17,"DW_IDX_type_hash","","",null,null],[17,"DW_IDX_lo_user","","",null,null],[17,"DW_IDX_hi_user","","",null,null],[17,"DW_DEFAULTED_no","","",null,null],[17,"DW_DEFAULTED_in_class","","",null,null],[17,"DW_DEFAULTED_out_of_class","","",null,null],[17,"DW_LNS_copy","","",null,null],[17,"DW_LNS_advance_pc","","",null,null],[17,"DW_LNS_advance_line","","",null,null],[17,"DW_LNS_set_file","","",null,null],[17,"DW_LNS_set_column","","",null,null],[17,"DW_LNS_negate_stmt","","",null,null],[17,"DW_LNS_set_basic_block","","",null,null],[17,"DW_LNS_const_add_pc","","",null,null],[17,"DW_LNS_fixed_advance_pc","","",null,null],[17,"DW_LNS_set_prologue_end","","",null,null],[17,"DW_LNS_set_epilogue_begin","","",null,null],[17,"DW_LNS_set_isa","","",null,null],[17,"DW_LNE_end_sequence","","",null,null],[17,"DW_LNE_set_address","","",null,null],[17,"DW_LNE_define_file","","",null,null],[17,"DW_LNE_set_discriminator","","",null,null],[17,"DW_LNE_lo_user","","",null,null],[17,"DW_LNE_hi_user","","",null,null],[17,"DW_LNCT_path","","",null,null],[17,"DW_LNCT_directory_index","","",null,null],[17,"DW_LNCT_timestamp","","",null,null],[17,"DW_LNCT_size","","",null,null],[17,"DW_LNCT_MD5","","",null,null],[17,"DW_LNCT_lo_user","","",null,null],[17,"DW_LNCT_hi_user","","",null,null],[17,"DW_MACRO_define","","",null,null],[17,"DW_MACRO_undef","","",null,null],[17,"DW_MACRO_start_file","","",null,null],[17,"DW_MACRO_end_file","","",null,null],[17,"DW_MACRO_define_strp","","",null,null],[17,"DW_MACRO_undef_strp","","",null,null],[17,"DW_MACRO_import","","",null,null],[17,"DW_MACRO_define_sup","","",null,null],[17,"DW_MACRO_undef_sup","","",null,null],[17,"DW_MACRO_import_sup","","",null,null],[17,"DW_MACRO_define_strx","","",null,null],[17,"DW_MACRO_undef_strx","","",null,null],[17,"DW_MACRO_lo_user","","",null,null],[17,"DW_MACRO_hi_user","","",null,null],[17,"DW_RLE_end_of_list","","",null,null],[17,"DW_RLE_base_addressx","","",null,null],[17,"DW_RLE_startx_endx","","",null,null],[17,"DW_RLE_startx_length","","",null,null],[17,"DW_RLE_offset_pair","","",null,null],[17,"DW_RLE_base_address","","",null,null],[17,"DW_RLE_start_end","","",null,null],[17,"DW_RLE_start_length","","",null,null],[17,"DW_OP_addr","","",null,null],[17,"DW_OP_deref","","",null,null],[17,"DW_OP_const1u","","",null,null],[17,"DW_OP_const1s","","",null,null],[17,"DW_OP_const2u","","",null,null],[17,"DW_OP_const2s","","",null,null],[17,"DW_OP_const4u","","",null,null],[17,"DW_OP_const4s","","",null,null],[17,"DW_OP_const8u","","",null,null],[17,"DW_OP_const8s","","",null,null],[17,"DW_OP_constu","","",null,null],[17,"DW_OP_consts","","",null,null],[17,"DW_OP_dup","","",null,null],[17,"DW_OP_drop","","",null,null],[17,"DW_OP_over","","",null,null],[17,"DW_OP_pick","","",null,null],[17,"DW_OP_swap","","",null,null],[17,"DW_OP_rot","","",null,null],[17,"DW_OP_xderef","","",null,null],[17,"DW_OP_abs","","",null,null],[17,"DW_OP_and","","",null,null],[17,"DW_OP_div","","",null,null],[17,"DW_OP_minus","","",null,null],[17,"DW_OP_mod","","",null,null],[17,"DW_OP_mul","","",null,null],[17,"DW_OP_neg","","",null,null],[17,"DW_OP_not","","",null,null],[17,"DW_OP_or","","",null,null],[17,"DW_OP_plus","","",null,null],[17,"DW_OP_plus_uconst","","",null,null],[17,"DW_OP_shl","","",null,null],[17,"DW_OP_shr","","",null,null],[17,"DW_OP_shra","","",null,null],[17,"DW_OP_xor","","",null,null],[17,"DW_OP_bra","","",null,null],[17,"DW_OP_eq","","",null,null],[17,"DW_OP_ge","","",null,null],[17,"DW_OP_gt","","",null,null],[17,"DW_OP_le","","",null,null],[17,"DW_OP_lt","","",null,null],[17,"DW_OP_ne","","",null,null],[17,"DW_OP_skip","","",null,null],[17,"DW_OP_lit0","","",null,null],[17,"DW_OP_lit1","","",null,null],[17,"DW_OP_lit2","","",null,null],[17,"DW_OP_lit3","","",null,null],[17,"DW_OP_lit4","","",null,null],[17,"DW_OP_lit5","","",null,null],[17,"DW_OP_lit6","","",null,null],[17,"DW_OP_lit7","","",null,null],[17,"DW_OP_lit8","","",null,null],[17,"DW_OP_lit9","","",null,null],[17,"DW_OP_lit10","","",null,null],[17,"DW_OP_lit11","","",null,null],[17,"DW_OP_lit12","","",null,null],[17,"DW_OP_lit13","","",null,null],[17,"DW_OP_lit14","","",null,null],[17,"DW_OP_lit15","","",null,null],[17,"DW_OP_lit16","","",null,null],[17,"DW_OP_lit17","","",null,null],[17,"DW_OP_lit18","","",null,null],[17,"DW_OP_lit19","","",null,null],[17,"DW_OP_lit20","","",null,null],[17,"DW_OP_lit21","","",null,null],[17,"DW_OP_lit22","","",null,null],[17,"DW_OP_lit23","","",null,null],[17,"DW_OP_lit24","","",null,null],[17,"DW_OP_lit25","","",null,null],[17,"DW_OP_lit26","","",null,null],[17,"DW_OP_lit27","","",null,null],[17,"DW_OP_lit28","","",null,null],[17,"DW_OP_lit29","","",null,null],[17,"DW_OP_lit30","","",null,null],[17,"DW_OP_lit31","","",null,null],[17,"DW_OP_reg0","","",null,null],[17,"DW_OP_reg1","","",null,null],[17,"DW_OP_reg2","","",null,null],[17,"DW_OP_reg3","","",null,null],[17,"DW_OP_reg4","","",null,null],[17,"DW_OP_reg5","","",null,null],[17,"DW_OP_reg6","","",null,null],[17,"DW_OP_reg7","","",null,null],[17,"DW_OP_reg8","","",null,null],[17,"DW_OP_reg9","","",null,null],[17,"DW_OP_reg10","","",null,null],[17,"DW_OP_reg11","","",null,null],[17,"DW_OP_reg12","","",null,null],[17,"DW_OP_reg13","","",null,null],[17,"DW_OP_reg14","","",null,null],[17,"DW_OP_reg15","","",null,null],[17,"DW_OP_reg16","","",null,null],[17,"DW_OP_reg17","","",null,null],[17,"DW_OP_reg18","","",null,null],[17,"DW_OP_reg19","","",null,null],[17,"DW_OP_reg20","","",null,null],[17,"DW_OP_reg21","","",null,null],[17,"DW_OP_reg22","","",null,null],[17,"DW_OP_reg23","","",null,null],[17,"DW_OP_reg24","","",null,null],[17,"DW_OP_reg25","","",null,null],[17,"DW_OP_reg26","","",null,null],[17,"DW_OP_reg27","","",null,null],[17,"DW_OP_reg28","","",null,null],[17,"DW_OP_reg29","","",null,null],[17,"DW_OP_reg30","","",null,null],[17,"DW_OP_reg31","","",null,null],[17,"DW_OP_breg0","","",null,null],[17,"DW_OP_breg1","","",null,null],[17,"DW_OP_breg2","","",null,null],[17,"DW_OP_breg3","","",null,null],[17,"DW_OP_breg4","","",null,null],[17,"DW_OP_breg5","","",null,null],[17,"DW_OP_breg6","","",null,null],[17,"DW_OP_breg7","","",null,null],[17,"DW_OP_breg8","","",null,null],[17,"DW_OP_breg9","","",null,null],[17,"DW_OP_breg10","","",null,null],[17,"DW_OP_breg11","","",null,null],[17,"DW_OP_breg12","","",null,null],[17,"DW_OP_breg13","","",null,null],[17,"DW_OP_breg14","","",null,null],[17,"DW_OP_breg15","","",null,null],[17,"DW_OP_breg16","","",null,null],[17,"DW_OP_breg17","","",null,null],[17,"DW_OP_breg18","","",null,null],[17,"DW_OP_breg19","","",null,null],[17,"DW_OP_breg20","","",null,null],[17,"DW_OP_breg21","","",null,null],[17,"DW_OP_breg22","","",null,null],[17,"DW_OP_breg23","","",null,null],[17,"DW_OP_breg24","","",null,null],[17,"DW_OP_breg25","","",null,null],[17,"DW_OP_breg26","","",null,null],[17,"DW_OP_breg27","","",null,null],[17,"DW_OP_breg28","","",null,null],[17,"DW_OP_breg29","","",null,null],[17,"DW_OP_breg30","","",null,null],[17,"DW_OP_breg31","","",null,null],[17,"DW_OP_regx","","",null,null],[17,"DW_OP_fbreg","","",null,null],[17,"DW_OP_bregx","","",null,null],[17,"DW_OP_piece","","",null,null],[17,"DW_OP_deref_size","","",null,null],[17,"DW_OP_xderef_size","","",null,null],[17,"DW_OP_nop","","",null,null],[17,"DW_OP_push_object_address","","",null,null],[17,"DW_OP_call2","","",null,null],[17,"DW_OP_call4","","",null,null],[17,"DW_OP_call_ref","","",null,null],[17,"DW_OP_form_tls_address","","",null,null],[17,"DW_OP_call_frame_cfa","","",null,null],[17,"DW_OP_bit_piece","","",null,null],[17,"DW_OP_implicit_value","","",null,null],[17,"DW_OP_stack_value","","",null,null],[17,"DW_OP_implicit_pointer","","",null,null],[17,"DW_OP_addrx","","",null,null],[17,"DW_OP_constx","","",null,null],[17,"DW_OP_entry_value","","",null,null],[17,"DW_OP_const_type","","",null,null],[17,"DW_OP_regval_type","","",null,null],[17,"DW_OP_deref_type","","",null,null],[17,"DW_OP_xderef_type","","",null,null],[17,"DW_OP_convert","","",null,null],[17,"DW_OP_reinterpret","","",null,null],[17,"DW_OP_GNU_push_tls_address","","",null,null],[17,"DW_OP_GNU_implicit_pointer","","",null,null],[17,"DW_OP_GNU_entry_value","","",null,null],[17,"DW_OP_GNU_parameter_ref","","",null,null],[17,"DW_EH_PE_uleb128","","",null,null],[17,"DW_EH_PE_udata2","","",null,null],[17,"DW_EH_PE_udata4","","",null,null],[17,"DW_EH_PE_udata8","","",null,null],[17,"DW_EH_PE_sleb128","","",null,null],[17,"DW_EH_PE_sdata2","","",null,null],[17,"DW_EH_PE_sdata4","","",null,null],[17,"DW_EH_PE_sdata8","","",null,null],[17,"DW_EH_PE_pcrel","","",null,null],[17,"DW_EH_PE_textrel","","",null,null],[17,"DW_EH_PE_datarel","","",null,null],[17,"DW_EH_PE_funcrel","","",null,null],[17,"DW_EH_PE_aligned","","",null,null],[17,"DW_EH_PE_indirect","","",null,null],[17,"DW_EH_PE_absptr","","",null,null],[17,"DW_EH_PE_omit","","",null,null],[8,"UnwindOffset","","An offset into an `UnwindSection`.",null,null],[10,"into","","Convert an `UnwindOffset<T>` into a `T`.",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"UnwindSection","","A section holding unwind information: either `.debug_frame` or `.eh_frame`. See `DebugFrame` and `EhFrame` respectively.",null,null],[16,"Offset","","The offset type associated with this CFI section. Either `DebugFrameOffset` or `EhFrameOffset`.",124,null],[11,"entries","","Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s in this `.debug_frame` section.",124,{"inputs":[{"name":"self"},{"name":"baseaddresses"}],"output":{"name":"cfientriesiter"}}],[11,"cie_from_offset","","Parse the `CommonInformationEntry` at the given offset.",124,null],[11,"unwind_info_for_address","","Find the frame unwind information for the given address.",124,{"inputs":[{"name":"self"},{"name":"baseaddresses"},{"name":"uninitializedunwindcontext"},{"name":"u64"}],"output":{"name":"unwindresult"}}],[8,"Endianity","","A trait describing the endianity of some buffer.",null,null],[10,"is_big_endian","","Return true for big endian byte order.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_little_endian","","Return true for little endian byte order.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",125,null],[11,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",125,null],[11,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",125,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",125,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",125,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",125,null],[11,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",125,null],[8,"Reader","","A trait for reading the data from a DWARF section.",null,null],[16,"Endian","","The endianity of bytes that are read.",126,null],[16,"Offset","","The type used for offsets and lengths.",126,null],[10,"endian","","Return the endianity of bytes that are read.",126,null],[10,"len","","Return the number of bytes remaining.",126,null],[10,"is_empty","","Return true if the number of bytes remaining is zero.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"empty","","Set the number of bytes remaining to zero.",126,{"inputs":[{"name":"self"}],"output":null}],[10,"truncate","","Set the number of bytes remaining to the specified length.",126,null],[10,"offset_from","","Return the offset of this reader's data relative to the start of the given base reader's data.",126,null],[10,"find","","Find the index of the first occurence of the given byte. The offset of the reader is not changed.",126,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"skip","","Discard the specified number of bytes.",126,null],[10,"split","","Split a reader in two.",126,null],[10,"to_slice","","Return all remaining data as a clone-on-write slice.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"to_string","","Convert all remaining data to a clone-on-write string.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"to_string_lossy","","Convert all remaining data to a clone-on-write string, including invalid characters.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8_array","","Read a u8 array.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read an i8.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read an i16.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read an i32.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read an i64.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_null_terminated_slice","","Read a null-terminated slice, and return it (excluding the null).",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uleb128","","Read an unsigned LEB128 encoded integer.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_sleb128","","Read a signed LEB128 encoded integer.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_address","","Read an address-sized integer, and return it as a `u64`.",126,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_word","","Parse a word-sized integer according to the DWARF format, and return it as a `u64`.",126,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"result"}}],[11,"read_offset","","Parse a word-sized integer according to the DWARF format, and return it as an offset.",126,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"result"}}],[8,"ReaderOffset","","A trait for offsets with a DWARF section.",null,null],[10,"from_u8","","Convert a u8 to an offset.",127,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"from_u16","","Convert a u16 to an offset.",127,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[10,"from_i16","","Convert an i16 to an offset.",127,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[10,"from_u32","","Convert a u32 to an offset.",127,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"from_u64","","Convert a u64 to an offset.",127,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[10,"into_u64","","Convert an offset to a u64.",127,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`.",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"checked_sub","","Checked subtraction. Computes `self - other`.",127,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"LineNumberProgram","","A `LineNumberProgram` provides access to a `LineNumberProgramHeader` and a way to add files to the files table if necessary. Gimli consumers should never need to use or see this trait.",null,null],[10,"header","","Get a reference to the held `LineNumberProgramHeader`.",128,{"inputs":[{"name":"self"}],"output":{"name":"linenumberprogramheader"}}],[10,"add_file","","Add a file to the file table if necessary.",128,{"inputs":[{"name":"self"},{"name":"fileentry"}],"output":null}],[8,"Section","","A convenience trait for loading DWARF sections from object files.  To be used like:",null,null],[10,"section_name","","Returns the ELF section name for this type.",129,{"inputs":[],"output":{"name":"str"}}],[11,"entries","","Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s in this `.debug_frame` section.",124,{"inputs":[{"name":"self"},{"name":"baseaddresses"}],"output":{"name":"cfientriesiter"}}],[11,"cie_from_offset","","Parse the `CommonInformationEntry` at the given offset.",124,null],[11,"unwind_info_for_address","","Find the frame unwind information for the given address.",124,{"inputs":[{"name":"self"},{"name":"baseaddresses"},{"name":"uninitializedunwindcontext"},{"name":"u64"}],"output":{"name":"unwindresult"}}],[11,"is_little_endian","","Return true for little endian byte order.",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",125,null],[11,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",125,null],[11,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",125,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",125,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",125,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",125,null],[11,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",125,null],[11,"read_null_terminated_slice","","Read a null-terminated slice, and return it (excluding the null).",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uleb128","","Read an unsigned LEB128 encoded integer.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_sleb128","","Read a signed LEB128 encoded integer.",126,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_address","","Read an address-sized integer, and return it as a `u64`.",126,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_word","","Parse a word-sized integer according to the DWARF format, and return it as a `u64`.",126,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"result"}}],[11,"read_offset","","Parse a word-sized integer according to the DWARF format, and return it as an offset.",126,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"result"}}]],"paths":[[3,"DebugFrameOffset"],[3,"EhFrameOffset"],[3,"BaseAddresses"],[3,"DwUt"],[3,"DwCfa"],[3,"DwChildren"],[3,"DwTag"],[3,"DwAt"],[3,"DwForm"],[3,"DwAte"],[3,"DwLle"],[3,"DwDs"],[3,"DwEnd"],[3,"DwAccess"],[3,"DwVis"],[3,"DwVirtuality"],[3,"DwLang"],[3,"DwAddr"],[3,"DwId"],[3,"DwCc"],[3,"DwInl"],[3,"DwOrd"],[3,"DwDsc"],[3,"DwIdx"],[3,"DwDefaulted"],[3,"DwLns"],[3,"DwLne"],[3,"DwLnct"],[3,"DwMacro"],[3,"DwRle"],[3,"DwOp"],[3,"DwEhPe"],[3,"DebugMacinfoOffset"],[3,"DebugAbbrevOffset"],[3,"DebugLineOffset"],[3,"LineNumberSequence"],[3,"DebugLocOffset"],[3,"LocationListEntry"],[3,"Piece"],[3,"Expression"],[3,"DebugRangesOffset"],[3,"Range"],[3,"DebugStrOffset"],[3,"DebugInfoOffset"],[3,"UnitOffset"],[3,"DebugTypeSignature"],[3,"DebugTypesOffset"],[4,"CieOrFde"],[4,"CfaRule"],[4,"RegisterRule"],[4,"CallFrameInstruction"],[4,"RunTimeEndian"],[4,"Error"],[4,"Format"],[4,"Pointer"],[4,"Opcode"],[4,"ColumnType"],[4,"DieReference"],[4,"Operation"],[4,"Location"],[4,"EvaluationResult"],[4,"AttributeValue"],[3,"DebugFrame"],[3,"EhFrameHdr"],[3,"ParsedEhFrameHdr"],[3,"EhHdrTable"],[3,"EhFrame"],[3,"CfiEntriesIter"],[3,"Augmentation"],[3,"CommonInformationEntry"],[3,"PartialFrameDescriptionEntry"],[3,"FrameDescriptionEntry"],[3,"UninitializedUnwindContext"],[3,"InitializedUnwindContext"],[3,"UnwindTable"],[3,"RegisterRuleIter"],[3,"UnwindTableRow"],[3,"CallFrameInstructionIter"],[3,"LittleEndian"],[3,"BigEndian"],[3,"EndianBuf"],[3,"DebugAbbrev"],[3,"Abbreviations"],[3,"Abbreviation"],[3,"AttributeSpecification"],[3,"ArangeEntry"],[3,"DebugAranges"],[3,"ArangeEntryIter"],[3,"DebugLine"],[3,"IncompleteLineNumberProgram"],[3,"StateMachine"],[3,"OpcodesIter"],[3,"LineNumberRow"],[3,"LineNumberProgramHeader"],[3,"CompleteLineNumberProgram"],[3,"FileEntry"],[3,"DebugLoc"],[3,"RawLocationListIter"],[3,"LocationListIter"],[3,"Evaluation"],[3,"PubNamesEntry"],[3,"DebugPubNames"],[3,"PubNamesEntryIter"],[3,"PubTypesEntry"],[3,"DebugPubTypes"],[3,"PubTypesEntryIter"],[3,"DebugRanges"],[3,"RawRangesIter"],[3,"RangesIter"],[3,"DebugStr"],[3,"DebugInfo"],[3,"CompilationUnitHeadersIter"],[3,"CompilationUnitHeader"],[3,"DebuggingInformationEntry"],[3,"Attribute"],[3,"AttrsIter"],[3,"EntriesCursor"],[3,"EntriesTree"],[3,"EntriesTreeNode"],[3,"EntriesTreeIter"],[3,"DebugTypes"],[3,"TypeUnitHeadersIter"],[3,"TypeUnitHeader"],[8,"UnwindOffset"],[8,"UnwindSection"],[8,"Endianity"],[8,"Reader"],[8,"ReaderOffset"],[8,"LineNumberProgram"],[8,"Section"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
initSearch(searchIndex);
